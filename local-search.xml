<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>嵌入式 Linux 开发环境初步搭建</title>
    <link href="/2023/12/13/post-6/"/>
    <url>/2023/12/13/post-6/</url>
    
    <content type="html"><![CDATA[<blockquote><p>对于嵌入式 Linux 开发，第一步的难题就是搭建起一个方便易用的开发环境，说着是易用，配置的过程也是较为繁琐，Linux 相比 Windows 之下就是一匹需要驯服的野马。所以本文汇总我使用 iMX6ULL 开发板搭建开发环境的方法和步骤。</p></blockquote><h2 id="VMware-Ubuntu-虚拟机系统安装与配置"><a href="#VMware-Ubuntu-虚拟机系统安装与配置" class="headerlink" title="VMware Ubuntu 虚拟机系统安装与配置"></a>VMware Ubuntu 虚拟机系统安装与配置</h2><ol><li>安装 VMware Workstation 和 下载准备 Ubuntu 系统镜像（这里采用 22.04 LTS 发行版）。</li><li>更换 apt sources.list 软件源（阿里源、清华源等）以改善软件包管理网络访问质量和速度。</li></ol><h2 id="软件准备"><a href="#软件准备" class="headerlink" title="软件准备"></a>软件准备</h2><p>除了VMware 和 Ubuntu.</p><p>在Windows下 我们还需要</p><h2 id="开发环境概要"><a href="#开发环境概要" class="headerlink" title="开发环境概要"></a>开发环境概要</h2><ol><li>Windows 平台：使用 Visual Studio Code 编辑源代码；利用 SMB 便捷管理与 Linux 文件和其传输。</li><li>Ubuntu 平台：使用 VMware 虚拟机系统模拟 Linux 开发环境，最主要是在这个交叉编译环境中生成程序文件。</li><li>iMX6ULL 平台：当然，操作系统也是 Linux，但通过 Windows 使用 MobaXterm 串口通信访问开发板终端操作开发板。</li></ol><h2 id="开发局域网环境配置"><a href="#开发局域网环境配置" class="headerlink" title="开发局域网环境配置"></a>开发局域网环境配置</h2><p>上面介绍的三个平台，那么如何通过 MobaXterm 整合连接这三个平台？<br>我们采取的方法是配置这三个平台的网络设备在同一个局域网下。</p><ol><li><p>我住所大致的网络拓扑如图所示。（主路由的LAN口连接到二级路由器LAN口并开启中转桥接模式，充当交换机，二级路由在书桌旁边，这样也方便有线连接开发板。）</p><img src="/2023/12/13/post-6/1.png" class=""><br/><br/></li><li><p>Windows：直接连接二级路由器，一般我们就是这样访问互联网，这个不作太多说明。</p></li><li><p>Ubuntu：注意在 Ubuntu 虚拟机系统中，需要配置两种网络设备，第一种是虚拟机系统默认的 NAT 连接方式，Ubuntu 通过 Windows 访问互联网，这个很好理解。第二种就是单独为 Ubuntu 添加虚拟网卡设备，具体配置方式如下。配置完成后，相当于 Ubuntu 的虚拟网卡也成为了局域网中的网络设备。</p></li><li><p>iMX6Ull: 开发板也是直接使用网线连接 ETH 网口（以太网）到二级路由器，与台式主机一样。</p></li></ol><p>最后接线完成后，这三个平台的设备就处于同一局域网中了。<br>另外建议在主路由器后台管理中，绑定三个设备对应的 MAC 地址，避免 DHCP 频繁变更分配到的 IP 地址。</p><p>在 Windows 和 Ubuntu 终端中分别使用 ipconfig 和 ifconfig 命令可以检查对应 IP 地址。<br>假设三个设备分配的 IP 如下：<br>Windows: 192.168.0.1<br>Ubuntu: 192.168.0.2<br>iMX6ULL: 192.168.0.3</p><p>接下使用 ping 命令检查相互之间是否能正常连接即可。</p><h2 id="交叉编译工具链"><a href="#交叉编译工具链" class="headerlink" title="交叉编译工具链"></a>交叉编译工具链</h2><h2 id="Ubuntu-配置-Samba-Windows-映射路径访问-Ubuntu-文件"><a href="#Ubuntu-配置-Samba-Windows-映射路径访问-Ubuntu-文件" class="headerlink" title="Ubuntu 配置 Samba + Windows 映射路径访问 Ubuntu 文件"></a>Ubuntu 配置 Samba + Windows 映射路径访问 Ubuntu 文件</h2><h2 id="Ubuntu-配置-SSH-MobaXterm-SSH-终端访问"><a href="#Ubuntu-配置-SSH-MobaXterm-SSH-终端访问" class="headerlink" title="Ubuntu 配置 SSH + MobaXterm SSH 终端访问"></a>Ubuntu 配置 SSH + MobaXterm SSH 终端访问</h2><h2 id="开发板连接-Windows-MobaXterm-Serial-终端访问"><a href="#开发板连接-Windows-MobaXterm-Serial-终端访问" class="headerlink" title="开发板连接 Windows + MobaXterm Serial 终端访问"></a>开发板连接 Windows + MobaXterm Serial 终端访问</h2><h2 id="Ubuntu-配置-NFS-挂载目录"><a href="#Ubuntu-配置-NFS-挂载目录" class="headerlink" title="Ubuntu 配置 NFS 挂载目录"></a>Ubuntu 配置 NFS 挂载目录</h2>]]></content>
    
    
    
    <tags>
      
      <tag>环境搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>嵌入式技能学习进度与教程清单 [2023/11/26 更新]</title>
    <link href="/2023/11/26/post-5/"/>
    <url>/2023/11/26/post-5/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文汇总学习进度和一些教程。</p></blockquote><h2 id="编程语言-Programming-Language"><a href="#编程语言-Programming-Language" class="headerlink" title="编程语言 - Programming Language"></a>编程语言 - Programming Language</h2><p><strong>C语言</strong></p><p>书籍：C Primer Plus 第 6 版【进度 - 指针进阶 60%】</p><p>视频：鹏哥 2021 版 - BV1U44y1y7xN 【进度 - 第 10 章 指针与数组】</p><h2 id="通用基础-Basic"><a href="#通用基础-Basic" class="headerlink" title="通用基础 - Basic"></a>通用基础 - Basic</h2><p><strong>计算机原理</strong></p><p>书籍：计算机是如何跑起来的【进度 - <strong>已完成</strong>】</p><p>书籍：程序是如何跑起来的【进度 - 刚开始】</p><h2 id="单片机-MCU"><a href="#单片机-MCU" class="headerlink" title="单片机 - MCU"></a>单片机 - MCU</h2><p><strong>51 单片机</strong></p><p>视频：江科大 - BV1Mb411e7re 【进度 - 串口通信】</p><h2 id="操作系统-OS"><a href="#操作系统-OS" class="headerlink" title="操作系统 - OS"></a>操作系统 - OS</h2><p><strong>Linux</strong></p><p>视频：韦东山 - BV1w4411B7a4 【Linux 基础入门】</p><h2 id="其它-Other"><a href="#其它-Other" class="headerlink" title="其它 - Other"></a>其它 - Other</h2><p><strong>Web 前端</strong></p><p><strong>HTML &amp; CSS</strong></p><p>书籍：Web前端开发技术（第3版）<em>储久良</em>【进度 - HTML5 &amp; CSS 部分已完成】</p><p>视频：黑马 【进度 - 早期已完成（掌握）】</p>]]></content>
    
    
    
    <tags>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C 语言数据存储基础</title>
    <link href="/2023/09/25/post-4/"/>
    <url>/2023/09/25/post-4/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文介绍 C 语言数据存储的详细内容。</p></blockquote><h2 id="1-数据类型"><a href="#1-数据类型" class="headerlink" title="1. 数据类型"></a>1. 数据类型</h2><h3 id="1-1-类型的基本归类"><a href="#1-1-类型的基本归类" class="headerlink" title="1.1 类型的基本归类"></a>1.1 类型的基本归类</h3><p>C语言中有多种基本数据类型，包括整数、浮点数、字符等。这些数据类型在内存中占用的空间大小不同，例如，int通常占用4个字节，float占用4个字节，char占用1个字节。数据类型决定了数据在内存中的存储方式和表示形式，可以分为以下的五大类型：</p><h3 id="1-1-1-整型"><a href="#1-1-1-整型" class="headerlink" title="1.1.1 整型"></a>1.1.1 整型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span><br><span class="hljs-type">signed</span> <span class="hljs-type">char</span><br><span class="hljs-type">short</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> [<span class="hljs-type">int</span>]<br><span class="hljs-type">signed</span> <span class="hljs-type">short</span> [<span class="hljs-type">int</span>]<br><span class="hljs-type">int</span> <br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span><br><span class="hljs-type">signed</span> <span class="hljs-type">int</span><br><span class="hljs-type">long</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span><br><span class="hljs-type">signed</span> <span class="hljs-type">long</span> [<span class="hljs-type">int</span>]<br></code></pre></td></tr></table></figure><h3 id="1-1-2-浮点型"><a href="#1-1-2-浮点型" class="headerlink" title="1.1.2 浮点型"></a>1.1.2 浮点型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">float</span><br><span class="hljs-type">double</span><br></code></pre></td></tr></table></figure><h3 id="1-1-3-构造类型"><a href="#1-1-3-构造类型" class="headerlink" title="1.1.3 构造类型"></a>1.1.3 构造类型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">array</span> <span class="hljs-comment">// 数组类型</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> // 结构体类型 </span><br><span class="hljs-class"><span class="hljs-title">enum</span> // 枚举类型 </span><br><span class="hljs-class"><span class="hljs-title">union</span> // 联合类型</span><br></code></pre></td></tr></table></figure><h3 id="1-1-4-指针类型"><a href="#1-1-4-指针类型" class="headerlink" title="1.1.4 指针类型"></a>1.1.4 指针类型</h3><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nim"><span class="hljs-type">int</span> *<span class="hljs-keyword">ptr</span><br><span class="hljs-type">char</span> *<span class="hljs-keyword">ptr</span><br><span class="hljs-type">float</span> *<span class="hljs-keyword">ptr</span><br><span class="hljs-type">void</span> *<span class="hljs-keyword">ptr</span><br></code></pre></td></tr></table></figure><h3 id="1-1-5-空类型"><a href="#1-1-5-空类型" class="headerlink" title="1.1.5 空类型"></a>1.1.5 空类型</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">void</span> <span class="hljs-comment">// 函数参数、返回类型、指针</span><br></code></pre></td></tr></table></figure><h2 id="2-整形在内存中的存储"><a href="#2-整形在内存中的存储" class="headerlink" title="2. 整形在内存中的存储"></a>2. 整形在内存中的存储</h2><p>C 变量的创建是根据数据类型在内存中开辟空间。</p><h3 id="2-1-原码、反码、补码"><a href="#2-1-原码、反码、补码" class="headerlink" title="2.1 原码、反码、补码"></a>2.1 原码、反码、补码</h3><p>数据在内存中以 2 进制的形式存储，以整数举例，其 2 进制存储有三种表示形式。</p><p>正整数：原码、反码、补码相同。</p><p>负整数：原码、反码、补码要进行计算。</p><p>举例代码：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dns">int a = -<span class="hljs-number">10</span><span class="hljs-comment">;</span><br>// <span class="hljs-number">10000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00001010</span> - 原码（原始 <span class="hljs-number">2</span> 进制表示形式）<br>// <span class="hljs-number">11111111</span> <span class="hljs-number">11111111</span> <span class="hljs-number">11111111</span> <span class="hljs-number">11110101</span> - 反码（符号位不变，其它位按位取反）<br>// <span class="hljs-number">11111111</span> <span class="hljs-number">11111111</span> <span class="hljs-number">11111111</span> <span class="hljs-number">11110110</span> - 补码（反码 + <span class="hljs-number">1</span>）<br></code></pre></td></tr></table></figure><p>VS Code 调试取 <code>&amp;a</code> 的地址后可以观察发现 16 进制的内存地址所存储的数据为 <code>F6 FF FF FF</code>，这恰好是 2 进制补码的 16 进制数，同时表明了整数在内存中存储的是补码。</p><img src="/2023/09/25/post-4/1.png" class=""><br/><br/><blockquote><p>为什么数据在内存中存放的是补码：因为在计算机组成原理中，补码可以将符号位和数值域统一处理，加法和减法也可以统一处理（CPU只有加法器），此外补码和原码相互转换，运算过程是相同的，无需额外的逻辑硬件电路。</p></blockquote><p>举例代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-comment">// 1 - 1;</span><br><span class="hljs-comment">// 1 + (-1);</span><br><span class="hljs-comment">// 00000000 00000000 00000000 00000001 - 1的原码</span><br><span class="hljs-comment">// 10000000 00000000 00000000 00000001 - -1的原码</span><br>    <span class="hljs-comment">// 如果计算机采用原码进行逻辑加减（1+（-1）），得到结果数值如下</span><br>    <span class="hljs-comment">// 10000000 00000000 00000000 00000010 - 是-2？可以看到数值是错误的。</span><br><span class="hljs-comment">// 如果采用补码运算，数值才是正确的，这是计算机组成底层原理的逻辑。</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-大端字节序和小端字节序"><a href="#2-2-大端字节序和小端字节序" class="headerlink" title="2.2 大端字节序和小端字节序"></a>2.2 大端字节序和小端字节序</h3><p>字节序（Byte Order）是指多字节数据在计算机内存中存储时的顺序。字节序分为两种主要类型：大端字节序（Big-Endian）和小端字节序（Little-Endian）。</p><ol><li><p><strong>大端字节序（Big-Endian）</strong>：</p><ul><li>在大端字节序中，多字节数据的最高有效字节（Most Significant Byte，MSB）存储在内存的最低地址处，而最低有效字节（Least Significant Byte，LSB）存储在内存的最高地址处。</li><li>大端字节序的表示方式类似于阅读书写的方式，先读取最高位的字节，然后是次高位，以此类推。</li></ul><p>例如，十六进制数0x12345678在大端字节序中存储为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">0x12</span> <span class="hljs-number">0x34</span> <span class="hljs-number">0x56</span> <span class="hljs-number">0x78</span><br></code></pre></td></tr></table></figure></li><li><p><strong>小端字节序（Little-Endian）</strong>：</p><ul><li>在小端字节序中，多字节数据的最低有效字节（LSB）存储在内存的最低地址处，而最高有效字节（MSB）存储在内存的最高地址处。</li><li>小端字节序的表示方式与计算机内部的数据存储方式相符，因此在许多计算机架构中使用较为广泛。</li></ul><p>例如，十六进制数0x12345678在小端字节序中存储为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-number">0x78</span> <span class="hljs-number">0x56</span> <span class="hljs-number">0x34</span> <span class="hljs-number">0x12</span><br></code></pre></td></tr></table></figure></li></ol><p>字节序的选择在不同计算机架构和操作系统中可以有所不同。例如，x86 和 x86-64 架构通常使用小端字节序，而某些大型服务器架构（如SPARC）使用大端字节序。这种差异可能会在数据交换和网络通信中引起问题，因此在跨平台应用程序中，需要特别注意字节序的处理，以确保数据正确解释和传递。通常使用一种标准的字节序协议（如网络字节序）来协调不同架构之间的数据交换。</p>]]></content>
    
    
    
    <tags>
      
      <tag>数据存储png</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Visual Studio Code 中配置 C/C++ 运行环境</title>
    <link href="/2023/04/23/post-3/"/>
    <url>/2023/04/23/post-3/</url>
    
    <content type="html"><![CDATA[<blockquote><p>VS Code 作为一款轻量级的代码编辑器，在我学习前端的时候就已经爱不释手，可以说是程序员人手必备的编辑器。但在学习 C 的阶段，由于觉得 Visual Studio 2022 比较臃肿，所以便对想在 VS Code 中配置 C&#x2F;C++ 的编译环境，以下将介绍大致的方法。</p></blockquote><h2 id="1-MinGW-编译器安装"><a href="#1-MinGW-编译器安装" class="headerlink" title="1. MinGW 编译器安装"></a>1. MinGW 编译器安装</h2><blockquote><p>MinGW（Minimalist GNU for Windows）是一个用于 Windows 平台的开发工具集，它允许开发者在 Windows 操作系统上使用 GNU 工具集来编译和构建软件，包括 C、C++ 和其他编程语言。MinGW 的目标是提供一个轻量级、开源的开发环境，使开发者能够在 Windows 上进行跨平台的开发。</p><p>下载地址：<a href="https://sourceforge.net/projects/mingw-w64/files/">Sourgeforce</a></p></blockquote><blockquote><p>第二种方法可以通过 VS Code 官方教程中提到的 MSYS2 来安装，下面还是继续介绍比较多人选择的方式。</p><p>参考：（<a href="https://code.visualstudio.com/docs/cpp/config-mingw">Get Started with C++ and MinGW-w64 in Visual Studio Code</a>）</p></blockquote><br/><p>进入地址后找到并选择 GCC-8.1.0 中的 <code>x86_64-win32-seh</code> 下载：</p><img src="/2023/04/23/post-3/1.png" class=""><br/><br/><p>下载完成解压到系统非中文路径，解压后的结构如下：</p><img src="/2023/04/23/post-3/2.png" class=""><br/><br/><p>接着编辑环境变量 <code>Path</code>，添加 <code>bin</code> 路径：</p><img src="/2023/04/23/post-3/3.png" class=""><h2 id="2-VS-Code-插件配置"><a href="#2-VS-Code-插件配置" class="headerlink" title="2. VS Code 插件配置"></a>2. VS Code 插件配置</h2><p>在 VS Code 扩展商店中搜索并下载 C&#x2F;C++ 插件安装：</p><img src="/2023/04/23/post-3/4.png" class=""><br/><br/><p>接下来新建任意文件夹，编写一个 <code>test.c</code> 并输入简单的 C 代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> <br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello, World!\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后键盘操作 <code>Ctrl + Shif + P</code> 呼出菜单选择 <code>C/C++:编辑配置(UI)</code>，如红框所示选择 MinGW 的 <code>bin</code> 路径中的 <code>gcc.exe</code> 作为编译器，同时智能代码提示 <code>IntelliSense</code> 模式选择 <code>gcc-x64 (legacy)</code>：</p><img src="/2023/04/23/post-3/7.png" class=""><h2 id="3-编译任务配置生成"><a href="#3-编译任务配置生成" class="headerlink" title="3. 编译任务配置生成"></a>3. 编译任务配置生成</h2><p>上述 C 代码编写完成后，通过菜单栏或快捷键 <code>Ctrl + Shif + B</code> 运行生成任务：</p><img src="/2023/04/23/post-3/8.png" class=""><br/><br/><p>此时会生成一个 <code>tasks.json</code> 文件：</p><img src="/2023/04/23/post-3/9.png" class=""><h2 id="4-可执行程序运行"><a href="#4-可执行程序运行" class="headerlink" title="4. 可执行程序运行"></a>4. 可执行程序运行</h2><p>编译任务完成后，会发现工作目录生成了 <code>[filename].exe</code> 可执行程序，在终端输入 <code>./[filename].exe</code> 即可以执行程序并输出结果。（我这里编辑了一些设置，所以生成路径不一样。）</p><blockquote><p>一般很多人都喜欢用 Windows 的黑框命令提示符，但是其实在 VS Code 中自带的终端是可以解决诸如程序运行一闪而过的问题，可以省去一些额外的配置。</p></blockquote><img src="/2023/04/23/post-3/10.png" class=""><h2 id="5-中文问题解决"><a href="#5-中文问题解决" class="headerlink" title="5. 中文问题解决"></a>5. 中文问题解决</h2><p>在中文环境下，中文字符和文件名都可能会造成乱码和编译错误的问题，解决办法如果</p><img src="/2023/04/23/post-3/6.png" class=""><p>在 <code>task.json</code> 第 13 行添加以下代码，不要忘记上一行最后有一个 <code>,</code> 逗号。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-string">&quot;-fexec-charset=GBK&quot;</span><br></code></pre></td></tr></table></figure><h2 id="6-设置-tasks-json-文件"><a href="#6-设置-tasks-json-文件" class="headerlink" title="6. 设置 tasks.json 文件"></a>6. 设置 tasks.json 文件</h2><p>如果想要输出的可执行文件更加简洁统一，可以按照以下设置：</p><p>在第 12 行中按如下格式可以将编译后的exe文件统一保存到executable files这个文件夹中，具体可以自定义，这样就可以统一整理exe文件，默认是保存在根目录。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;program&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;fileDirname&#125;\\executable files\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><blockquote><p>其实这里涉及到了生成 &amp; 编译路径的一些配置和同时编译多文件这些问题，这里不详细展开，具体需要参考官方文档。参考：<a href="https://code.visualstudio.com/docs/editor/variables-reference">Visual Studio Code Variables Reference</a></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>C/C++环境</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于 Hexo 和 GitHub Pages 的博客建站教程</title>
    <link href="/2023/01/25/post-2/"/>
    <url>/2023/01/25/post-2/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文将介绍和总结我参考 Web 上的教程来配置 GitHub Pages 和 Hexo 框架建立博客的大致方法。</p></blockquote><h2 id="1-建站原理"><a href="#1-建站原理" class="headerlink" title="1. 建站原理"></a>1. 建站原理</h2><p>搭建类似本站博客的原理主要有以下四个部分：</p><ol><li><p>博客框架（将用户的输入快速生成由 <code>HTML</code> <code>CSS</code> <code>JavaScript</code> 组成的前端界面，可以对博客进行快速且简便的设置）</p><blockquote><p>常见的博客框架：<code>Hexo</code>  <code>WordPress</code> <code>Jekyll</code></p></blockquote></li><li><p>代码托管平台（为用户提供访问和修改的接口，将博客所需的文件、代码存放在云端）</p><blockquote><p>常见的平台：<code>GitHub</code>  <code>Gitee</code></p></blockquote></li><li><p>站点部署服务（将博客网站目录部署到互联网以便访问浏览）</p><blockquote><p>常见的部署服务：<code>GitHub Pages</code>  <code>Netify</code></p></blockquote></li><li><p>访问加速服务（CDN 加速，通过多节点缓存来提高网络内容的解析和访问速度）</p><blockquote><p>常见的加速服务：<code>Cloudfare</code>  <code>Alibaba</code>  <code>Tencent</code></p></blockquote></li></ol><h2 id="2-Hexo-环境配置"><a href="#2-Hexo-环境配置" class="headerlink" title="2. Hexo 环境配置"></a>2. Hexo 环境配置</h2><h3 id="2-1-新建站点仓库"><a href="#2-1-新建站点仓库" class="headerlink" title="2.1 新建站点仓库"></a>2.1 新建站点仓库</h3><ul><li>首先在 Github 中新建仓库，详细信息请参阅：”<a href="https://docs.github.com/zh/pages/getting-started-with-github-pages/creating-a-github-pages-site#creating-a-repository-for-your-site">为站点创建仓库</a>“。</li><li>❗注意仓库名称必须命名为 <code>&lt;user&gt;.github.io</code>。</li></ul><img src="/2023/01/25/post-2/post-2-1.webp" class="">  <h3 id="2-2-Git-的安装与配置"><a href="#2-2-Git-的安装与配置" class="headerlink" title="2.2 Git 的安装与配置"></a>2.2 Git 的安装与配置</h3><blockquote><p>Git 是一个用于管理源代码的分布式版本控制系统。版本控制系统会在您修改文件时记录并保存更改，使您可以随时恢复以前的工作版本。<br>🧲 Windows 下载链接：<a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a></p></blockquote><ul><li>Windows 平台正常选择 <code>64-bit Git for Windows Setup</code> 即可。</li><li>安装完成后任意路径运行 <code>Git Bash</code> 终端，设置 Git 用户名和邮箱。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git --version # 验证版本号是否成功安装<br>git config –global &quot;user_name” # 双引号内替换用户名<br>git config –global &quot;user_email&quot; # 双引号内替换个人邮箱<br></code></pre></td></tr></table></figure><h3 id="2-3-配置-SSH-公匙"><a href="#2-3-配置-SSH-公匙" class="headerlink" title="2.3 配置 SSH 公匙"></a>2.3 配置 SSH 公匙</h3><ul><li>Git Bash 运行以下代码生成 SSH 密匙，详细信息请参阅：”<a href="https://docs.github.com/zh/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent#generating-a-new-ssh-key">生成新 SSH 密钥</a>“。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh-keygen -t ed25519 -C &quot;your_email@example.com&quot; # 双引号内替换个人邮箱<br></code></pre></td></tr></table></figure><ul><li>生成成功后，将 SSH 公钥复制到剪贴板。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">clip &lt; ~/.ssh/id_ed25519.pub<br></code></pre></td></tr></table></figure><ul><li><p>将复制到的 SSH 公匙添加到账户设置，详细信息请参阅：”<a href="https://docs.github.com/zh/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account#adding-a-new-ssh-key-to-your-account">向你的帐户添加新的 SSH 密钥</a>“。</p></li><li><p>到此即完成 Git 的安装和配置，后续可以开始使用 SSH 方式来进行 Git 连接。</p></li></ul><blockquote><p>✅<strong>推荐使用 SSH 方式，HTTPS 方式每次连接均需要输入用户名和密码。</strong></p></blockquote><h3 id="2-4-Node-js-的安装与配置"><a href="#2-4-Node-js-的安装与配置" class="headerlink" title="2.4 Node.js 的安装与配置"></a>2.4 Node.js 的安装与配置</h3><blockquote><p>Node.js（通常简称为Node）是一个用于构建服务器端和网络应用程序的运行时环境。Node.js是基于 Chrome V8 JavaScript 引擎构建的，它允许您使用 JavaScript 编程语言来创建高性能和可伸缩的网络应用程序。</p><p>🧲 Windows 下载链接：<a href="https://nodejs.cn/download/">https://nodejs.cn/download/</a></p></blockquote><ul><li>正常选择 LTS 稳定版本或最新版本 msi 安装包下载安装。</li><li>安装完成后终端运行以下命令检查是否成功返回版本号，即代表安装成功。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">node -v<br>npm -v<br></code></pre></td></tr></table></figure><h2 id="3-Hexo-安装"><a href="#3-Hexo-安装" class="headerlink" title="3. Hexo 安装"></a>3. Hexo 安装</h2><blockquote><p>Hexo 是一个快速、简单且强大的静态博客生成器，基于 Node.js 开发。它允许用户使用 Markdown 格式的文本来撰写博客文章，然后将这些文章转换成静态 HTML 页面，方便发布在网站上。Hexo 的目标是提供一个轻松管理和发布博客内容的解决方案，同时具备高度可定制性。</p></blockquote><ul><li>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</li><li>详细信息请参阅：”<a href="https://hexo.io/zh-cn/docs/">Hexo 文档</a>“。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><ul><li>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo init &lt;folder&gt;<br>cd &lt;folder&gt;<br>npm install<br></code></pre></td></tr></table></figure><ul><li>本地运行 Hexo 并预览效果</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo clean # 清理缓存<br>hexo g # 生成静态文件<br>hexo s # 运行本地服务器<br></code></pre></td></tr></table></figure><ul><li>最后本地使用浏览器打开 <code>http://127.0.0.1:4000</code> 即可以显示初始化的 Hexo 主题，上图我已经安装了 Fluid 主题，到这里就完成了 Hexo 的安装，后续就可以按照自己的喜好开始配置主题和自定义网站。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>建站</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello, World!</title>
    <link href="/2023/01/15/post-1/"/>
    <url>/2023/01/15/post-1/</url>
    
    <content type="html"><![CDATA[<h3 id="My-Blog"><a href="#My-Blog" class="headerlink" title="My Blog"></a>My Blog</h3><p>一直以来，自己希望能搭建一个网站，博客自然是一个不错的选择，加上目前保持有在学习嵌入式和编程的相关技能，更加需要记录下一些历程。所以经过多番折腾，终于这次部署完成了这个博客。在这里我会分享一些日常自己折腾的东西或学习历程上各种笔记总结。站点采用了常用的 Hexo 框架和 Github Pages 部署，后续再慢慢对 Fluid 主题进行自定义完善修改。</p><p><strong>旅途刚开始…</strong></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
