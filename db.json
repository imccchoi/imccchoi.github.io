{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","path":"img/default.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/fluid.png","path":"img/fluid.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","path":"img/loading.gif","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","path":"js/boot.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","path":"js/events.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","path":"js/plugins.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":1,"renderable":1},{"_id":"source/img/alessandro-guarino-IH_wt_fD7ls-unsplash.jpg","path":"img/alessandro-guarino-IH_wt_fD7ls-unsplash.jpg","modified":1,"renderable":0},{"_id":"source/img/caroline-hernandez-vDemIkH_sVU-unsplash.jpg","path":"img/caroline-hernandez-vDemIkH_sVU-unsplash.jpg","modified":1,"renderable":0},{"_id":"source/img/connor-jalbert-5B1mB7Sdbg0-unsplash.jpg","path":"img/connor-jalbert-5B1mB7Sdbg0-unsplash.jpg","modified":1,"renderable":0},{"_id":"source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":0},{"_id":"source/img/gerson-repreza-cpmZ9WkkYGE-unsplash.jpg","path":"img/gerson-repreza-cpmZ9WkkYGE-unsplash.jpg","modified":1,"renderable":0},{"_id":"source/img/ivan-karpov-7oLuzIZ3QIg-unsplash.jpg","path":"img/ivan-karpov-7oLuzIZ3QIg-unsplash.jpg","modified":1,"renderable":0},{"_id":"source/img/juan-carlos-becerra-Gu-pefXTaEU-unsplash.jpg","path":"img/juan-carlos-becerra-Gu-pefXTaEU-unsplash.jpg","modified":1,"renderable":0},{"_id":"source/img/post-1.png","path":"img/post-1.png","modified":1,"renderable":0},{"_id":"source/img/post-2.png","path":"img/post-2.png","modified":1,"renderable":0},{"_id":"source/img/post-2.jpg","path":"img/post-2.jpg","modified":1,"renderable":0},{"_id":"source/img/post-3.jpg","path":"img/post-3.jpg","modified":1,"renderable":0},{"_id":"source/img/post-3.png","path":"img/post-3.png","modified":1,"renderable":0},{"_id":"source/img/post-4.jpg","path":"img/post-4.jpg","modified":1,"renderable":0},{"_id":"source/img/post-4.png","path":"img/post-4.png","modified":1,"renderable":0},{"_id":"source/img/post-5.jpg","path":"img/post-5.jpg","modified":1,"renderable":0},{"_id":"source/img/post-6.png","path":"img/post-6.png","modified":1,"renderable":0},{"_id":"source/img/venti-views-cHRDevKFDBw-unsplash.jpg","path":"img/venti-views-cHRDevKFDBw-unsplash.jpg","modified":1,"renderable":0}],"Cache":[{"_id":"source/_posts/post-2.md","hash":"b75d105240d738f084047f2730c593e13f4b5d78","modified":1707123211009},{"_id":"source/_posts/post-1.md","hash":"a7cab486cf3879feb11ec1761d9170846333b6d5","modified":1707123211009},{"_id":"source/_posts/post-3.md","hash":"022d686a7e368cb0a5bdcefb9ae4372da3b5fa58","modified":1707123211049},{"_id":"source/_posts/post-4.md","hash":"a81babaa3323dc23eae49e8a80e4858d81904864","modified":1707123211170},{"_id":"source/_posts/post-6.md","hash":"da609458fa896a8a9e788666d84cff1b83a9944c","modified":1707123211480},{"_id":"source/_posts/post-5.md","hash":"032176b4808fe727244e605b453e599b13e0c7bf","modified":1707123211472},{"_id":"source/img/favicon.png","hash":"87c4f41e6358cb37f6671de3f4fb54db472e5472","modified":1707123211611},{"_id":"source/img/post-1.png","hash":"0ce6cf56888c8663c1b0650228f97fc7ac15d08c","modified":1707123211674},{"_id":"source/img/post-2.png","hash":"5e70471011a55a68b65c99cc21c8f37e4c526c2f","modified":1707123211674},{"_id":"source/img/post-2.jpg","hash":"5e70471011a55a68b65c99cc21c8f37e4c526c2f","modified":1707123211674},{"_id":"source/img/post-4.png","hash":"f8283774082db64fb3dc590933114ec4bdc6794a","modified":1707123211702},{"_id":"source/img/post-3.jpg","hash":"4c7cd5e4078c3b427a9733c1eece8e9b84733fbf","modified":1707123211674},{"_id":"source/img/post-4.jpg","hash":"a2736c1a934263c5e59c93eba59d05447f2d0e25","modified":1707123211694},{"_id":"source/about/index.md","hash":"283be1f4a971188c95687d085a9be054a15718e7","modified":1707123211482},{"_id":"source/img/post-3.png","hash":"49faf2bf3c4e6f71e5aaef8d57af8c768d63ad0f","modified":1707123211694},{"_id":"source/img/post-6.png","hash":"ade3e1465269a792609df5f153ed77a7d488802a","modified":1707123211714},{"_id":"source/_posts/post-2/4.png","hash":"2a63855b9a0f796121d8b83117b9fbe055f9ffd3","modified":1707123211029},{"_id":"source/_posts/post-2/5.png","hash":"e3d1796c3423841dd3edc9d2de1b9021461ae760","modified":1707123211047},{"_id":"source/_posts/post-2/6.png","hash":"8d1e2e161ddaddd1b8d4a7352697e0d1a5e7e613","modified":1707123211049},{"_id":"source/_posts/post-3/1.png","hash":"63a23cc04238134474b163783a8f1022d816f878","modified":1707123211060},{"_id":"source/_posts/post-2/7.png","hash":"05cdac516da61872868951934e3ca2371a696aa7","modified":1707123211049},{"_id":"source/_posts/post-3/10.png","hash":"06e83666cb6ae52d8992782df38b9589896a2699","modified":1707123211060},{"_id":"source/_posts/post-3/3.png","hash":"f2c15b34deec1b8d0d799be2870dcda3131d38ab","modified":1707123211070},{"_id":"source/_posts/post-3/6.png","hash":"b040d2f3e0c42c3e7e7f578e329896e1f6e9c797","modified":1707123211080},{"_id":"source/_posts/post-3/8.png","hash":"777a507a0c43b31d949cb18e8d2e81854a6f5cd1","modified":1707123211100},{"_id":"source/_posts/post-3/9.png","hash":"10389077f97106ffce29aa684b22956b0dfa89d8","modified":1707123211170},{"_id":"source/_posts/post-2/1.png","hash":"5fc304e2521a711422f98e9c631a7a2ca7522177","modified":1707123211019},{"_id":"source/_posts/post-2/3.png","hash":"5c692663e886b182afbe6ff5e280ab0be9409840","modified":1707123211027},{"_id":"source/_posts/post-6/1.png","hash":"bcd00344512a434dfa54455d37c5cb475b1a49b5","modified":1707123211482},{"_id":"source/_posts/post-2/2.png","hash":"5ec23ff49809bf7dbcfd1b72348eb7971ef79523","modified":1707123211019},{"_id":"source/_posts/post-3/2.png","hash":"f3c94a0c2a66fefa57d24a1dc228dd1e1d7b6f3c","modified":1707123211060},{"_id":"source/_posts/post-4/1.png","hash":"d3686c21f0b631c90ca92919d0c817000e4c48ab","modified":1707123211472},{"_id":"source/_posts/post-3/5.png","hash":"132992f00a6ecfc0071dff72acaf08d3c51686d0","modified":1707123211080},{"_id":"source/_posts/post-3/7.png","hash":"5aef6c867f08b2524d51f5b41d0f7271e4a68978","modified":1707123211100},{"_id":"source/_posts/post-3/4.png","hash":"6fe27c4192f4e647b5a756231898543ed1c0c86f","modified":1707123211078},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1707123156104},{"_id":"node_modules/hexo-theme-fluid/package.json","hash":"30e3f4ccfef8474c05cf0b1eb02e91bd0a152807","modified":1707123154578},{"_id":"node_modules/hexo-theme-fluid/README.md","hash":"6d752df6f2278033dc2512a7d5be22c8a8eb665a","modified":1707123153696},{"_id":"node_modules/hexo-theme-fluid/LICENSE","hash":"26f9356fd6e84b5a88df6d9014378f41b65ba209","modified":1707123153694},{"_id":"node_modules/hexo-theme-fluid/languages/en.yml","hash":"cb11b39f44ea069652c9647179606b6cecc98d50","modified":1707123153725},{"_id":"node_modules/hexo-theme-fluid/_config.yml","hash":"088788e149051fc0a3c6096ba95e35a8344de04b","modified":1707123153701},{"_id":"node_modules/hexo-theme-fluid/languages/de.yml","hash":"0e7d455d9e004ff15d8924b7a0c35cea25ee5b1d","modified":1707123153721},{"_id":"node_modules/hexo-theme-fluid/languages/es.yml","hash":"7112594259c88c04714be152af7fd377687dad40","modified":1707123153730},{"_id":"node_modules/hexo-theme-fluid/languages/ja.yml","hash":"3dd6d20f8d26585a7c154a8e59fe8d5d902f4c6a","modified":1707123153732},{"_id":"node_modules/hexo-theme-fluid/languages/ru.yml","hash":"7dc78f22696649a4c68dc65a9b52d9a992fa82a0","modified":1707123153732},{"_id":"node_modules/hexo-theme-fluid/languages/zh-CN.yml","hash":"f96a22f989897ecddc69d5867a206e1cf6b8f610","modified":1707123153732},{"_id":"node_modules/hexo-theme-fluid/layout/404.ejs","hash":"b84d575c7b7f778b4cb64e89ad3d0aed4a896820","modified":1707123153755},{"_id":"node_modules/hexo-theme-fluid/languages/zh-HK.yml","hash":"80ed400a7adaa92ea54fc7f5d534c9af795bed00","modified":1707123153732},{"_id":"node_modules/hexo-theme-fluid/languages/zh-TW.yml","hash":"596d031dff3826ae8e4ffc8931fff28977b73247","modified":1707123153743},{"_id":"node_modules/hexo-theme-fluid/layout/archive.ejs","hash":"7c1f44005849791feae4abaa10fae4cb983d3277","modified":1707123154231},{"_id":"node_modules/hexo-theme-fluid/layout/category.ejs","hash":"f099161b738a16a32253f42085b5444f902018ed","modified":1707123154547},{"_id":"node_modules/hexo-theme-fluid/layout/about.ejs","hash":"163bee643e6a38912d3ae70923c83c48d57222e7","modified":1707123154229},{"_id":"node_modules/hexo-theme-fluid/layout/categories.ejs","hash":"13859726c27b6c79b5876ec174176d0f9c1ee164","modified":1707123154242},{"_id":"node_modules/hexo-theme-fluid/layout/index.ejs","hash":"db000a6a0cec19d32a6e7e94cd4c478500d9c5ac","modified":1707123154568},{"_id":"node_modules/hexo-theme-fluid/layout/tag.ejs","hash":"9d686364c4d16a1a9219471623af452035c5b966","modified":1707123154578},{"_id":"node_modules/hexo-theme-fluid/layout/layout.ejs","hash":"7e0023474128fbe4d68c467704c41f1712432415","modified":1707123154568},{"_id":"node_modules/hexo-theme-fluid/languages/eo.yml","hash":"a556251cc50a5680578c03f1efbf252b1f4ab860","modified":1707123153725},{"_id":"node_modules/hexo-theme-fluid/layout/links.ejs","hash":"1cac32ec4579aaf7b9fa39d317497331d4c5e1dd","modified":1707123154568},{"_id":"node_modules/hexo-theme-fluid/layout/page.ejs","hash":"ed5007a3feb8f14d3d2843271bfb298eb0c56219","modified":1707123154576},{"_id":"node_modules/hexo-theme-fluid/layout/post.ejs","hash":"505bcc06e55066b7cc5551d9ac0694e7713bfab5","modified":1707123154578},{"_id":"node_modules/hexo-theme-fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1707123154578},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/archive-list.ejs","hash":"7520fbf91f762207c2ab06b2c293235cd5b23905","modified":1707123153762},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/category-chains.ejs","hash":"18309584aab83bc4deb20723ebad832149dd2e24","modified":1707123153762},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments.ejs","hash":"d707c47b2638c94e489bc43d4cfd098b7c58447f","modified":1707123153780},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/css.ejs","hash":"85f6e051550907681ab4ed2e268ac8f6e9ebf931","modified":1707123153833},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/category-list.ejs","hash":"f8d2f1907450e61968e6d54443e9be8138196a77","modified":1707123153777},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/footer.ejs","hash":"10ccfb8eef4e16182183c9a3e175c90d5b6397d3","modified":1707123153836},{"_id":"node_modules/hexo-theme-fluid/scripts/events/index.js","hash":"79de5a379b28cad759a49048351c7f6b8915bd7d","modified":1707123154592},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/head.ejs","hash":"7b7b1d098726e86687a15fe3d520d178577ffcae","modified":1707123153852},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/markdown-plugins.ejs","hash":"fc4bdf7de0cf1a66d0e5e4fba1b31d6f7ed49468","modified":1707123153864},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/header.ejs","hash":"0d5e397d30051e5fbabe7b47cfd1f1e6a5820af1","modified":1707123153854},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/default-injects.js","hash":"b2013ae8e189cd07ebc8a2ff48a78e153345210f","modified":1707123154679},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1707123153864},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1707123154687},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/post-filter.js","hash":"d516b9db63067f9ea9c72cc75ae4ff358417e77d","modified":1707123154689},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/date.js","hash":"9bda6382f61b40a20c24af466fe10c8366ebb74c","modified":1707123154699},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/scripts.ejs","hash":"da5810785105e5075861593c7ac22c7aa9665a72","modified":1707123154014},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/engine.js","hash":"d3a231d106795ce99cb0bc77eb65f9ae44515933","modified":1707123154708},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/export-config.js","hash":"47e6dba7652a621a54067413490a11c8a89e3d7b","modified":1707123154710},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/import.js","hash":"ca53e8dbf7d44cfd372cfa79ac60f35a7d5b0076","modified":1707123154710},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/search.ejs","hash":"70e1c929e084ca8a2648cedabf29b372511ea2b8","modified":1707123154077},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/injects.js","hash":"1ad2ae6b11bd8806ee7dd6eb7140d8b54a95d613","modified":1707123154710},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1707123154710},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/utils.js","hash":"226f99b465ff513de075a8e78b321d6cb62592ca","modified":1707123154748},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/wordcount.js","hash":"4543b8954c5c2ca91191cc0d53cf071b3f26faaa","modified":1707123154750},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1707123154730},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":1707123154692},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":1707123154699},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1707123154750},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/checkbox.js","hash":"4938610c3543a921a341bc074626d511cb1a4b45","modified":1707123154760},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/scope.js","hash":"d41d9d658fcb54964b388598e996747aadb85b0f","modified":1707123154718},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1707123154760},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1707123154760},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1707123154760},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":1707123154768},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1707123154775},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/object.js","hash":"33b57e4decdc5e75c518859f168c8ba80b2c665b","modified":1707123154775},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/resolve.js","hash":"8c4a8b62aa8608f12f1e9046231dff04859dc3e9","modified":1707123154780},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1707123154780},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight-dark.styl","hash":"45695ef75c31a4aa57324dd408b7e2327a337018","modified":1707123156112},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","hash":"855ae5fe229c51afa57f7645f6997a27a705d7e4","modified":1707123156122},{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1707123156112},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1707123156122},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight.styl","hash":"a9efc52a646a9e585439c768557e3e3c9e3326dc","modified":1707123156120},{"_id":"node_modules/hexo-theme-fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1707123156265},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1707123156275},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1707123156273},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","hash":"76a198f8721352ebeaf5b2ef2f4db00612da4796","modified":1707123156280},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1707123156282},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1707123156287},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1707123156278},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1707123156288},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1707123156284},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1707123153782},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1707123156288},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1707123156293},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1707123156295},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1707123153793},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1707123153782},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/giscus.ejs","hash":"95f8b866b158eff9352c381c243b332a155a5110","modified":1707123153782},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1707123153793},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1707123153793},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/utterances.ejs","hash":"c7ccf7f28308334a6da6f5425b141a24b5eca0e2","modified":1707123153803},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/twikoo.ejs","hash":"e6820fb7f13662c42f8433ec95404238f4c1860c","modified":1707123153801},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/valine.ejs","hash":"19ba937553dddd317f827d682661a1066a7b1f30","modified":1707123153803},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/waline.ejs","hash":"12727da7cf3ac83443270f550be4d1c06135b52b","modified":1707123153822},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/footer/statistics.ejs","hash":"454d8dd4c39f9494ebeb03ca0746f5bc122af76a","modified":1707123153845},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1707123153782},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/footer/beian.ejs","hash":"4fb9b5dd3f3e41a586d6af44e5069afe7c81fff2","modified":1707123153845},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/analytics.ejs","hash":"1327395a4dde1ea06c476b047fb110bcd269149f","modified":1707123153872},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/code-widget.ejs","hash":"3a505cba37942badf62a56bbb8b605b72af330aa","modified":1707123153906},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/header/banner.ejs","hash":"e07757b59e7b89eea213d0e595cb5932f812fd32","modified":1707123153862},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/fancybox.ejs","hash":"9d1ea2a46b8c8ad8c168594d578f40764818ef13","modified":1707123153946},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/header/navigation.ejs","hash":"870db75e4e403a840c4463dfeed2c9114846e7cc","modified":1707123153864},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/highlight.ejs","hash":"7529dd215b09d3557804333942377b9e20fa554e","modified":1707123153946},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/compatible-configs.js","hash":"ef474d1fa5bbafc52619ced0f9dc7eaf2affb363","modified":1707123154596},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/mermaid.ejs","hash":"e49506e9895e255e0e53f34a11d325f83109c1b0","modified":1707123153955},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/anchorjs.ejs","hash":"40181442d3a2b8734783a0ad7caf2d2522e3f2ab","modified":1707123153903},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/footnote.js","hash":"2ec2ae03c79bb1ae7ac3fcf7e00fb52d1af2898d","modified":1707123154598},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/hello.js","hash":"44c5eb97b98813a07c659d6afedd17fad63b1821","modified":1707123154598},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/encrypt.ejs","hash":"e3713fa78e0fc14a239360b020068d8513573ae4","modified":1707123153914},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/highlight.js","hash":"0f02df2244e275595e72163498d42f42bcf0de5e","modified":1707123154598},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/math.ejs","hash":"dcbf9a381ee76f2f1f75fcbc22c50a502ec85023","modified":1707123153953},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/injects.js","hash":"5ae4b07204683e54b5a1b74e931702bbce2ac23e","modified":1707123154677},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1707123153963},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1707123154679},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/merge-configs.js","hash":"7c944c43b2ece5dd84859bd9d1fe955d13427387","modified":1707123154679},{"_id":"node_modules/hexo-theme-fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1707123154799},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1707123156110},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/typed.ejs","hash":"51faef29f8e464bcb2e73049b428b88c8dd8b40a","modified":1707123153966},{"_id":"node_modules/hexo-theme-fluid/source/css/_variables/base.styl","hash":"4ed5f0ae105ef4c7dd92eaf652ceda176c38e502","modified":1707123156112},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/category-bar.ejs","hash":"8772bce97ed297e7a88523f4e939ed6436c22f87","modified":1707123153967},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/meta-bottom.ejs","hash":"7079b27a7bc15a7dfa9209f6be6051bdec49ebad","modified":1707123153977},{"_id":"node_modules/hexo-theme-fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1707123154801},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/sidebar-left.ejs","hash":"9992c99b3eb728ad195970e1b84d665f2c8691c4","modified":1707123153978},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/copyright.ejs","hash":"9d13392cea94b66d86422ad17c66e5ae67ce1d32","modified":1707123153967},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/meta-top.ejs","hash":"ce6e9f578f4faa45840abddf8f46af3f4b69c177","modified":1707123153978},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/toc.ejs","hash":"635a89060fbf72eeda066fc4bd0a97462f069417","modified":1707123154011},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/sidebar-right.ejs","hash":"d5fcc9b60e02f869a29a8c17a16a6028ecc1e6d8","modified":1707123153984},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1707123154809},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_archive/archive.styl","hash":"c475e6681546d30350eaed11f23081ecae80c375","modified":1707123154811},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category-chain.styl","hash":"0cdf7ef50dfd0669d3b257821384ff31cd81b7c9","modified":1707123155811},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category-bar.styl","hash":"cc6df43fef6bb3efecbfdd8b9e467424a1dea581","modified":1707123155809},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category-list.styl","hash":"7edfe1b571ecca7d08f5f4dbcf76f4ffdcfbf0b5","modified":1707123155814},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/base.styl","hash":"643284c567665f96915f0b64e59934dda315f74d","modified":1707123155797},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/color-schema.styl","hash":"61279540c2623ea4bf93e40613d41380839b92d3","modified":1707123155799},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/inline.styl","hash":"411a3fa3f924a87e00ff04d18b5c83283b049a4d","modified":1707123155801},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1707123155806},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_index/index.styl","hash":"0acbd71633bcc7191672ea4e1b2277bea350d73b","modified":1707123155817},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_links/links.styl","hash":"5c7f2044e3f1da05a3229537c06bd879836f8d6e","modified":1707123156030},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1707123156104},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/comment.styl","hash":"780f3788e7357bcd3f3262d781cb91bb53976a93","modified":1707123156030},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/highlight.styl","hash":"4df764d298fe556e501db4afc2b05686fe6ebcfb","modified":1707123156096},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/markdown.styl","hash":"1e3d3a82721e7c10bcfcecec6d81cf2979039452","modified":1707123156099},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/board.styl","hash":"4397037fc3f0033dbe546c33cd9dbdabd8cb1632","modified":1707123154825},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/post-tag.styl","hash":"27f70062415ccf66a9b6f4952db124fc1471fda5","modified":1707123156103},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"e0cebda4a6f499aff75e71417d88caa7ceb13b94","modified":1707123154811},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/post-page.styl","hash":"127bb5391370afe7fef2a297084d76406bc5e902","modified":1707123156101},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/banner.styl","hash":"7a0bd629bc234fc75e3cc8e3715ffada92f09e73","modified":1707123154819},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1707123155034},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"b66ab013f0f37d724a149b85b3c7432afcf460ad","modified":1707123155028},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footer.styl","hash":"2caaca71dd1ff63d583099ed817677dd267b457e","modified":1707123155032},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/header.styl","hash":"c4459248c66ea1326feed021179b847ae91d465f","modified":1707123155034},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"5d225357b4a58d46118e6616377168336ed44cb2","modified":1707123155115},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"0cf2f2bb44f456150d428016675d5876a9d2e2aa","modified":1707123155115},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/modal.styl","hash":"adf6c1e5c8e1fb41c77ce6e2258001df61245aa2","modified":1707123155113},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"8bb1b68e5f3552cb48c2ffa31edbc53646a8fb4c","modified":1707123155115},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1707123155127},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f0e429a27fa8a7658fcbddbb4d4dbe4afa12499a","modified":1707123155128},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1707123155753},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/toc.styl","hash":"9e7452aa2372153f25d7a4675c9d36d281a65d24","modified":1707123155795},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"26f71a9cd60d96bb0cb5bbdf58150b8e524d9707","modified":1707123155029},{"_id":"source/img/connor-jalbert-5B1mB7Sdbg0-unsplash.jpg","hash":"24fec899a6e9d8ec851657b7df0cdff90164986a","modified":1707123211603},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1707123156265},{"_id":"source/img/caroline-hernandez-vDemIkH_sVU-unsplash.jpg","hash":"60ab10c8b13adedbec7a2925da40c72a331efbe0","modified":1707123211543},{"_id":"source/img/post-5.jpg","hash":"e06d14f3f48e4f4470f97b587f580a30c97702e5","modified":1707123211714},{"_id":"source/img/gerson-repreza-cpmZ9WkkYGE-unsplash.jpg","hash":"c59b0b6f8d9fcf0fbffca7ff36d828310850aadb","modified":1707123211624},{"_id":"source/img/ivan-karpov-7oLuzIZ3QIg-unsplash.jpg","hash":"5c7b4987b196aca21fb0cb46fc5cf453b8f19a8b","modified":1707123211644},{"_id":"source/img/venti-views-cHRDevKFDBw-unsplash.jpg","hash":"793a1fae7ee774ddd0737d2e36b776b0bd973676","modified":1707123211742},{"_id":"source/img/juan-carlos-becerra-Gu-pefXTaEU-unsplash.jpg","hash":"9d5af7189cd882b35248cbea8592df28540f300e","modified":1707123211664},{"_id":"source/img/alessandro-guarino-IH_wt_fD7ls-unsplash.jpg","hash":"3cacfd5d7794cd990e8864bde4c5b405493286db","modified":1707123211533},{"_id":"public/local-search.xml","hash":"40069d12752f76ec82720d8860deba94e1c68e40","modified":1707206413248},{"_id":"public/about/index.html","hash":"e5beffb9f8d6b5c992b366f6889cae40eb05b6c1","modified":1707206413248},{"_id":"public/2023/12/13/post-6/index.html","hash":"71c1e96754c1be82ab866499f1ed387da4d89eb5","modified":1707206413248},{"_id":"public/2023/11/26/post-5/index.html","hash":"8f23d58abde99a446ba452a70d9f79b3fc426d23","modified":1707206413248},{"_id":"public/2023/09/25/post-4/index.html","hash":"8a9b5801f5f6deb3377f18715b9e4e92df730050","modified":1707206413248},{"_id":"public/2023/04/23/post-3/index.html","hash":"b8a4a7d4c4b259c187984b80f1060f8108115f75","modified":1707206413248},{"_id":"public/2023/01/25/post-2/index.html","hash":"85fe6e2e44e7fcaa86fb0fbfaed950360791486f","modified":1707206413248},{"_id":"public/2023/01/15/post-1/index.html","hash":"d490bb91a4b68554a65aa9c330540f685abd9fad","modified":1707206413248},{"_id":"public/archives/index.html","hash":"4b3e27794e970d57b71feab4e27a4c7a0def7fbb","modified":1707206413248},{"_id":"public/archives/2023/index.html","hash":"53bb6a317d0db05c4da95b658ffd0ba73ba34a24","modified":1707206413248},{"_id":"public/archives/2023/01/index.html","hash":"6919e89cff92214196611e222aba4a4667318185","modified":1707206413248},{"_id":"public/archives/2023/04/index.html","hash":"173a7ccaa6b6466487b79d9e10dee028852d38ff","modified":1707206413248},{"_id":"public/archives/2023/09/index.html","hash":"953de49da507bafb5c2aa8e0c15639ec8442d8b2","modified":1707206413248},{"_id":"public/archives/2023/11/index.html","hash":"2617c70603e2f485fdb8a57b6f1a82320fab1dd0","modified":1707206413248},{"_id":"public/archives/2023/12/index.html","hash":"91eb2db22fe92576f8edae59690881f728337b42","modified":1707206413248},{"_id":"public/index.html","hash":"1357ce55129005be7e4cd78e7b016715f742b9cf","modified":1707206413248},{"_id":"public/tags/建站/index.html","hash":"be75e8838a67797e1f99644b201cd64f2dd48f7f","modified":1707206413248},{"_id":"public/tags/C-C-环境/index.html","hash":"80a4520c3f2d0f386bcaf9631f784548ad938e59","modified":1707206413248},{"_id":"public/tags/数据存储png/index.html","hash":"d3211f4550c918ce53ca2b9df6d97c959f2dca92","modified":1707206413248},{"_id":"public/tags/学习/index.html","hash":"6783b2787d84e6dfe3df9d548ff898f78a7ef87e","modified":1707206413248},{"_id":"public/tags/环境搭建/index.html","hash":"38047f41e679e949154f5c86310497090dd97612","modified":1707206413248},{"_id":"public/404.html","hash":"f4c0d336068d153d556c26b38b1cc358d35f21fe","modified":1707206413248},{"_id":"public/tags/index.html","hash":"bba504b8dbe869d2246629b3983dbd71be3010e7","modified":1707206413248},{"_id":"public/categories/index.html","hash":"86a7a2175b741aa132b26f5372419791d25b3ee3","modified":1707206413248},{"_id":"public/links/index.html","hash":"f1db77b0be6796459f95492a0afea57dc72eefb2","modified":1707206413248},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1707206413248},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1707206413248},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1707206413248},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1707206413248},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1707206413248},{"_id":"public/img/favicon.png","hash":"87c4f41e6358cb37f6671de3f4fb54db472e5472","modified":1707206413248},{"_id":"public/img/post-1.png","hash":"0ce6cf56888c8663c1b0650228f97fc7ac15d08c","modified":1707206413248},{"_id":"public/img/post-2.png","hash":"5e70471011a55a68b65c99cc21c8f37e4c526c2f","modified":1707206413248},{"_id":"public/img/post-2.jpg","hash":"5e70471011a55a68b65c99cc21c8f37e4c526c2f","modified":1707206413248},{"_id":"public/img/post-3.jpg","hash":"4c7cd5e4078c3b427a9733c1eece8e9b84733fbf","modified":1707206413248},{"_id":"public/img/post-3.png","hash":"49faf2bf3c4e6f71e5aaef8d57af8c768d63ad0f","modified":1707206413248},{"_id":"public/img/post-4.jpg","hash":"a2736c1a934263c5e59c93eba59d05447f2d0e25","modified":1707206413248},{"_id":"public/img/post-4.png","hash":"f8283774082db64fb3dc590933114ec4bdc6794a","modified":1707206413248},{"_id":"public/img/post-6.png","hash":"ade3e1465269a792609df5f153ed77a7d488802a","modified":1707206413248},{"_id":"public/2023/01/25/post-2/4.png","hash":"2a63855b9a0f796121d8b83117b9fbe055f9ffd3","modified":1707206413248},{"_id":"public/2023/01/25/post-2/5.png","hash":"e3d1796c3423841dd3edc9d2de1b9021461ae760","modified":1707206413248},{"_id":"public/2023/01/25/post-2/6.png","hash":"8d1e2e161ddaddd1b8d4a7352697e0d1a5e7e613","modified":1707206413248},{"_id":"public/2023/01/25/post-2/7.png","hash":"05cdac516da61872868951934e3ca2371a696aa7","modified":1707206413248},{"_id":"public/2023/04/23/post-3/1.png","hash":"63a23cc04238134474b163783a8f1022d816f878","modified":1707206413248},{"_id":"public/2023/04/23/post-3/10.png","hash":"06e83666cb6ae52d8992782df38b9589896a2699","modified":1707206413248},{"_id":"public/2023/04/23/post-3/3.png","hash":"f2c15b34deec1b8d0d799be2870dcda3131d38ab","modified":1707206413248},{"_id":"public/2023/04/23/post-3/6.png","hash":"b040d2f3e0c42c3e7e7f578e329896e1f6e9c797","modified":1707206413248},{"_id":"public/2023/04/23/post-3/8.png","hash":"777a507a0c43b31d949cb18e8d2e81854a6f5cd1","modified":1707206413248},{"_id":"public/2023/04/23/post-3/9.png","hash":"10389077f97106ffce29aa684b22956b0dfa89d8","modified":1707206413248},{"_id":"public/2023/12/13/post-6/1.png","hash":"bcd00344512a434dfa54455d37c5cb475b1a49b5","modified":1707206413248},{"_id":"public/2023/01/25/post-2/1.png","hash":"5fc304e2521a711422f98e9c631a7a2ca7522177","modified":1707206413248},{"_id":"public/2023/01/25/post-2/2.png","hash":"5ec23ff49809bf7dbcfd1b72348eb7971ef79523","modified":1707206413248},{"_id":"public/2023/01/25/post-2/3.png","hash":"5c692663e886b182afbe6ff5e280ab0be9409840","modified":1707206413248},{"_id":"public/2023/04/23/post-3/2.png","hash":"f3c94a0c2a66fefa57d24a1dc228dd1e1d7b6f3c","modified":1707206413248},{"_id":"public/2023/09/25/post-4/1.png","hash":"d3686c21f0b631c90ca92919d0c817000e4c48ab","modified":1707206413248},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1707206413248},{"_id":"public/css/highlight-dark.css","hash":"2b0daa6e5343da9dbb26d617d224b8397e48556b","modified":1707206413248},{"_id":"public/css/highlight.css","hash":"0f9a477d33d3b15ebe7e163e756fb7c54c7ded6b","modified":1707206413248},{"_id":"public/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1707206413248},{"_id":"public/css/main.css","hash":"4d4a763ef5e9ab2602c46e812d846bba7a277757","modified":1707206413248},{"_id":"public/js/color-schema.js","hash":"76a198f8721352ebeaf5b2ef2f4db00612da4796","modified":1707206413248},{"_id":"public/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1707206413248},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1707206413248},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1707206413248},{"_id":"public/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1707206413248},{"_id":"public/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1707206413248},{"_id":"public/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1707206413248},{"_id":"public/2023/04/23/post-3/5.png","hash":"132992f00a6ecfc0071dff72acaf08d3c51686d0","modified":1707206413248},{"_id":"public/2023/04/23/post-3/7.png","hash":"5aef6c867f08b2524d51f5b41d0f7271e4a68978","modified":1707206413248},{"_id":"public/2023/04/23/post-3/4.png","hash":"6fe27c4192f4e647b5a756231898543ed1c0c86f","modified":1707206413248},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1707206413248},{"_id":"public/img/connor-jalbert-5B1mB7Sdbg0-unsplash.jpg","hash":"24fec899a6e9d8ec851657b7df0cdff90164986a","modified":1707206413248},{"_id":"public/img/caroline-hernandez-vDemIkH_sVU-unsplash.jpg","hash":"60ab10c8b13adedbec7a2925da40c72a331efbe0","modified":1707206413248},{"_id":"public/img/gerson-repreza-cpmZ9WkkYGE-unsplash.jpg","hash":"c59b0b6f8d9fcf0fbffca7ff36d828310850aadb","modified":1707206413248},{"_id":"public/img/post-5.jpg","hash":"e06d14f3f48e4f4470f97b587f580a30c97702e5","modified":1707206413248},{"_id":"public/img/ivan-karpov-7oLuzIZ3QIg-unsplash.jpg","hash":"5c7b4987b196aca21fb0cb46fc5cf453b8f19a8b","modified":1707206413248},{"_id":"public/img/venti-views-cHRDevKFDBw-unsplash.jpg","hash":"793a1fae7ee774ddd0737d2e36b776b0bd973676","modified":1707206413248},{"_id":"public/img/juan-carlos-becerra-Gu-pefXTaEU-unsplash.jpg","hash":"9d5af7189cd882b35248cbea8592df28540f300e","modified":1707206413248},{"_id":"public/img/alessandro-guarino-IH_wt_fD7ls-unsplash.jpg","hash":"3cacfd5d7794cd990e8864bde4c5b405493286db","modified":1707206413248}],"Category":[],"Data":[],"Page":[{"title":"about","layout":"about","date":"2023-02-15T13:39:59.000Z","_content":"\n 这里是关于页面。\n","source":"about/index.md","raw":"---\ntitle: about\nlayout: about\ndate: 2023-02-15 21:39:59\n---\n\n 这里是关于页面。\n","updated":"2024-02-05T08:53:31.482Z","path":"about/index.html","comments":1,"_id":"clsa2mbr50000kkg297eg9u8d","content":"<p> 这里是关于页面。</p>\n","site":{"data":{}},"excerpt":"","more":"<p> 这里是关于页面。</p>\n"}],"Post":[{"title":"Hello, World!","date":"2023-01-14T16:00:00.000Z","index_img":"/img/post-1.png","_content":"\n> Hello, 博客开张了...\n\n一直以来想着能有个地方能记录下各种东西，加上目前正在学习，更加需要记录下一些历程。所以经过多番折腾，终于这次配置部署好了这个博客。在这里，我会记录下一些日常自己折腾的东西分享或学习路程上各种笔记总结，可以当作是笔记本、个人空间吧。站点采用了常用的 Hexo 框架和 Github Pages 部署，后续再慢慢对 Fluid 主题进行自定义完善修改吧。\n\n<br/>\n\nThe Journey begins...\n\n<br/>\n","source":"_posts/post-1.md","raw":"---\ntitle: Hello, World!\ndate: 2023-01-15\nindex_img: /img/post-1.png\ntags: \n---\n\n> Hello, 博客开张了...\n\n一直以来想着能有个地方能记录下各种东西，加上目前正在学习，更加需要记录下一些历程。所以经过多番折腾，终于这次配置部署好了这个博客。在这里，我会记录下一些日常自己折腾的东西分享或学习路程上各种笔记总结，可以当作是笔记本、个人空间吧。站点采用了常用的 Hexo 框架和 Github Pages 部署，后续再慢慢对 Fluid 主题进行自定义完善修改吧。\n\n<br/>\n\nThe Journey begins...\n\n<br/>\n","slug":"post-1","published":1,"updated":"2024-02-05T08:53:31.009Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsa2mbr80001kkg25chubjyc","content":"<blockquote>\n<p>Hello, 博客开张了…</p>\n</blockquote>\n<p>一直以来想着能有个地方能记录下各种东西，加上目前正在学习，更加需要记录下一些历程。所以经过多番折腾，终于这次配置部署好了这个博客。在这里，我会记录下一些日常自己折腾的东西分享或学习路程上各种笔记总结，可以当作是笔记本、个人空间吧。站点采用了常用的 Hexo 框架和 Github Pages 部署，后续再慢慢对 Fluid 主题进行自定义完善修改吧。</p>\n<br/>\n\n<p>The Journey begins…</p>\n<br/>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Hello, 博客开张了…</p>\n</blockquote>\n<p>一直以来想着能有个地方能记录下各种东西，加上目前正在学习，更加需要记录下一些历程。所以经过多番折腾，终于这次配置部署好了这个博客。在这里，我会记录下一些日常自己折腾的东西分享或学习路程上各种笔记总结，可以当作是笔记本、个人空间吧。站点采用了常用的 Hexo 框架和 Github Pages 部署，后续再慢慢对 Fluid 主题进行自定义完善修改吧。</p>\n<br/>\n\n<p>The Journey begins…</p>\n<br/>\n"},{"title":"基于 Hexo 和 GitHub Pages 的博客建站教程","date":"2023-01-25T06:57:08.000Z","index_img":"/img/post-2.png","_content":"\n> 本文将介绍和总结我参考 Web 上的教程来配置 GitHub Pages 和 Hexo 框架建立博客的大致方法。\n\n## 1. 建站原理\n\n搭建类似本站博客的原理主要有以下四个部分：\n\n1. 博客框架（将用户的输入快速生成由 `HTML` `CSS` `JavaScript` 组成的前端界面，可以对博客进行快速且简便的设置）\n\n   > 常见的博客框架：`Hexo`  `WordPress`  `VuePress`  `Hugo`  `Solo`  `Halo`  `Jekyll`\n\n2. 代码托管平台（为用户提供访问和修改的接口，将博客所需的文件、代码存放在云端）\n\n   > 常见的平台：`GitHub`  `Gitee`\n\n3. 站点部署服务（将博客网站目录部署到互联网以便访问浏览）\n\n   > 常见的部署服务：`GitHub Pages`  `Netify`\n\n4. 访问加速服务（CDN 加速，通过多节点缓存来提高网络内容的解析和访问速度） \n\n   > 常见的加速服务：`Cloudfare`  `Alibaba`  `Tencent`\n\n\n\n## 2. 准备工作\n\n### 2.1 GitHub 创建仓库\n\n首先需要注册一个 GitHub 账号，注册完成进入 GitHub 在 `Repositories` 中选择 `New` 新建一个仓库。\n\n> 注意：`Repository name` 要按照格式 <`username`.github.io> 填写，`username` 是注册时的用户名。\n\n{% asset_img 1.png \"test\" %}\n\n### 2.2 Git 的安装与配置\n\n> Git 是一个分布式版本控制系统，它用于跟踪计算机文件和协作开发项目。它的设计目标是帮助开发者更好地管理和协作代码，并追踪代码库中的变化。Git 是由 Linus Torvalds 于2005年创建，现在已经成为了开源软件开发的标准工具之一。\n>\n> 官网 Windows 版下载：https://git-scm.com/download/win\n\n安装完成后任意路径打开 `Git Bash`，运行以下代码设置自己的用户名和邮箱：\n\n```cmd\ngit config –global <user_name> // 用户名\ngit config –global <user_email> // 邮箱\ngit config –-list // 查看配置结果\n```\n\n#### 2.2.1 配置 SSH\n\n{% asset_img 2.png %}\n\n<br><br>\n\n命令行运行以下代码生成 SSH 密匙：\n\n```cmd\nssh-keygen -t rsa -C <user_email> // 生成 SSH 密匙\n```\n\n然后到 `C:\\Users\\<your_username>\\.ssh` 用记事本打开 `id_rsa.pub`，复制里面的公匙，\n\n再到 GitHub 里面个人头像依次进入 `Settings` - `SSH and GPG keys` - `New SSH Key` 添加密匙。\n\n到此即简单完成 Git 的安装和配置，后续也可以使用 SSH 来进行 Git。\n\n> https 方式在我这里报错太多遂放弃，而且 SSH 不用每次输密码。\n\n### 2.3 Node.js 的安装与配置\n\n> Node.js（通常简称为Node）是一个用于构建服务器端和网络应用程序的运行时环境。Node.js是基于 Chrome V8 JavaScript 引擎构建的，它允许您使用 JavaScript 编程语言来创建高性能和可伸缩的网络应用程序。\n>\n> 官网 Windows 版下载：https://nodejs.org/zh-cn/download/\n\n类似于 Git，安装程序如果没有特别要求的选项，一路 Next 即可完成安装。\n\n安装完成在命令行运行以下可以检查是否安装成功，即顺利显示版本号：\n\n```cmd\nnode -v\nnpm -v\n```\n\n#### 2.3.1 环境变量配置\n\n> 在上面已经完成了 Node 的安装，尽管不进行这个步骤也不影响正常使用，\n>\n> 但是不进行此步骤，在 Node.js 安装全局模板时，会默认存储到 `C:\\Users\\<your_username>\\AppData\\Roaming\\npm` 里面，\n>\n> 所以最好可以配置**全局安装模板** `node_gobal` 和**缓存目录** `node_cache` 这两个模块。\n\n- 在安装目录中，分别新建以下两个文件夹:\n\n\n{% asset_img 3.png %}\n\n<br>\n\n<br>\n\n- 然后在命令行运行以下代码：\n\n\n```cmd\nnpm config set prefix \"<node_gobal>\" // 替换node_gobal的路径\nnpm config set cache \"<node_cache>\" // 替换node_cache的路径\n```\n\n- `系统变量` 中新建变量：\n  - 变量名：`NODE_PATH`\n  - 变量值：`Node的安装路径`\n\n{% asset_img 4.png %}\n\n<br>\n\n<br>\n\n- `系统变量` 中编辑 `PATH` 添加如下变量值：\n  - `%NODE_PATH%`\n  - `%NODE_PATH%\\node_gobal`\n  - `%NODE_PATH%\\node_cache`\n\n{% asset_img 5.png %} \n\n<br>\n\n<br>\n\n到此完成 Node 的环境变量配置，接下来开始安装 Hexo 框架。\n\n## 3. Hexo 安装\n\n>Hexo 是一个快速、简单且强大的静态博客生成器，基于 Node.js 开发。它允许用户使用 Markdown 格式的文本来撰写博客文章，然后将这些文章转换成静态 HTML 页面，方便发布在网站上。Hexo 的目标是提供一个轻松管理和发布博客内容的解决方案，同时具备高度可定制性。\n\n- 运行 `Git Bash`：\n\n\n{% asset_img 6.png %}\n\n<br>\n\n<br>\n\n- 如上面所有必备的准备工作和程序安装完成后，即可开始使用 npm 安装 Hexo：\n\n\n```cmd\nnpm install -g hexo-cli // npm方式安装Hexo\nnpm -v // 查询版本号确认是否安装成功\n```\n\n- 安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件：\n\n\n```cmd\nhexo init <folder>\ncd <folder>\nnpm install\n```\n\n- 运行 Hexo：\n\n\n```cmd\nhexo clean // 清理缓存\nhexo g // 生成静态文件\nhexo s // 运行本地服务器\n```\n\n{% asset_img 7.png %}\n\n<br>\n\n<br>\n\n最后本地使用浏览器打开 `http://127.0.0.1:4000` 即可以显示初始化的 Hexo 主题，上图我已经安装了 Fluid 主题，到这里就完成了 Hexo 的安装，后续就可以按照自己的喜好开始配置主题和自定义网站。\n\n<br>\n","source":"_posts/post-2.md","raw":"---\ntitle: 基于 Hexo 和 GitHub Pages 的博客建站教程\ndate: 2023-01-25 14:57:08\nindex_img: /img/post-2.png\ntags: 建站\n---\n\n> 本文将介绍和总结我参考 Web 上的教程来配置 GitHub Pages 和 Hexo 框架建立博客的大致方法。\n\n## 1. 建站原理\n\n搭建类似本站博客的原理主要有以下四个部分：\n\n1. 博客框架（将用户的输入快速生成由 `HTML` `CSS` `JavaScript` 组成的前端界面，可以对博客进行快速且简便的设置）\n\n   > 常见的博客框架：`Hexo`  `WordPress`  `VuePress`  `Hugo`  `Solo`  `Halo`  `Jekyll`\n\n2. 代码托管平台（为用户提供访问和修改的接口，将博客所需的文件、代码存放在云端）\n\n   > 常见的平台：`GitHub`  `Gitee`\n\n3. 站点部署服务（将博客网站目录部署到互联网以便访问浏览）\n\n   > 常见的部署服务：`GitHub Pages`  `Netify`\n\n4. 访问加速服务（CDN 加速，通过多节点缓存来提高网络内容的解析和访问速度） \n\n   > 常见的加速服务：`Cloudfare`  `Alibaba`  `Tencent`\n\n\n\n## 2. 准备工作\n\n### 2.1 GitHub 创建仓库\n\n首先需要注册一个 GitHub 账号，注册完成进入 GitHub 在 `Repositories` 中选择 `New` 新建一个仓库。\n\n> 注意：`Repository name` 要按照格式 <`username`.github.io> 填写，`username` 是注册时的用户名。\n\n{% asset_img 1.png \"test\" %}\n\n### 2.2 Git 的安装与配置\n\n> Git 是一个分布式版本控制系统，它用于跟踪计算机文件和协作开发项目。它的设计目标是帮助开发者更好地管理和协作代码，并追踪代码库中的变化。Git 是由 Linus Torvalds 于2005年创建，现在已经成为了开源软件开发的标准工具之一。\n>\n> 官网 Windows 版下载：https://git-scm.com/download/win\n\n安装完成后任意路径打开 `Git Bash`，运行以下代码设置自己的用户名和邮箱：\n\n```cmd\ngit config –global <user_name> // 用户名\ngit config –global <user_email> // 邮箱\ngit config –-list // 查看配置结果\n```\n\n#### 2.2.1 配置 SSH\n\n{% asset_img 2.png %}\n\n<br><br>\n\n命令行运行以下代码生成 SSH 密匙：\n\n```cmd\nssh-keygen -t rsa -C <user_email> // 生成 SSH 密匙\n```\n\n然后到 `C:\\Users\\<your_username>\\.ssh` 用记事本打开 `id_rsa.pub`，复制里面的公匙，\n\n再到 GitHub 里面个人头像依次进入 `Settings` - `SSH and GPG keys` - `New SSH Key` 添加密匙。\n\n到此即简单完成 Git 的安装和配置，后续也可以使用 SSH 来进行 Git。\n\n> https 方式在我这里报错太多遂放弃，而且 SSH 不用每次输密码。\n\n### 2.3 Node.js 的安装与配置\n\n> Node.js（通常简称为Node）是一个用于构建服务器端和网络应用程序的运行时环境。Node.js是基于 Chrome V8 JavaScript 引擎构建的，它允许您使用 JavaScript 编程语言来创建高性能和可伸缩的网络应用程序。\n>\n> 官网 Windows 版下载：https://nodejs.org/zh-cn/download/\n\n类似于 Git，安装程序如果没有特别要求的选项，一路 Next 即可完成安装。\n\n安装完成在命令行运行以下可以检查是否安装成功，即顺利显示版本号：\n\n```cmd\nnode -v\nnpm -v\n```\n\n#### 2.3.1 环境变量配置\n\n> 在上面已经完成了 Node 的安装，尽管不进行这个步骤也不影响正常使用，\n>\n> 但是不进行此步骤，在 Node.js 安装全局模板时，会默认存储到 `C:\\Users\\<your_username>\\AppData\\Roaming\\npm` 里面，\n>\n> 所以最好可以配置**全局安装模板** `node_gobal` 和**缓存目录** `node_cache` 这两个模块。\n\n- 在安装目录中，分别新建以下两个文件夹:\n\n\n{% asset_img 3.png %}\n\n<br>\n\n<br>\n\n- 然后在命令行运行以下代码：\n\n\n```cmd\nnpm config set prefix \"<node_gobal>\" // 替换node_gobal的路径\nnpm config set cache \"<node_cache>\" // 替换node_cache的路径\n```\n\n- `系统变量` 中新建变量：\n  - 变量名：`NODE_PATH`\n  - 变量值：`Node的安装路径`\n\n{% asset_img 4.png %}\n\n<br>\n\n<br>\n\n- `系统变量` 中编辑 `PATH` 添加如下变量值：\n  - `%NODE_PATH%`\n  - `%NODE_PATH%\\node_gobal`\n  - `%NODE_PATH%\\node_cache`\n\n{% asset_img 5.png %} \n\n<br>\n\n<br>\n\n到此完成 Node 的环境变量配置，接下来开始安装 Hexo 框架。\n\n## 3. Hexo 安装\n\n>Hexo 是一个快速、简单且强大的静态博客生成器，基于 Node.js 开发。它允许用户使用 Markdown 格式的文本来撰写博客文章，然后将这些文章转换成静态 HTML 页面，方便发布在网站上。Hexo 的目标是提供一个轻松管理和发布博客内容的解决方案，同时具备高度可定制性。\n\n- 运行 `Git Bash`：\n\n\n{% asset_img 6.png %}\n\n<br>\n\n<br>\n\n- 如上面所有必备的准备工作和程序安装完成后，即可开始使用 npm 安装 Hexo：\n\n\n```cmd\nnpm install -g hexo-cli // npm方式安装Hexo\nnpm -v // 查询版本号确认是否安装成功\n```\n\n- 安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件：\n\n\n```cmd\nhexo init <folder>\ncd <folder>\nnpm install\n```\n\n- 运行 Hexo：\n\n\n```cmd\nhexo clean // 清理缓存\nhexo g // 生成静态文件\nhexo s // 运行本地服务器\n```\n\n{% asset_img 7.png %}\n\n<br>\n\n<br>\n\n最后本地使用浏览器打开 `http://127.0.0.1:4000` 即可以显示初始化的 Hexo 主题，上图我已经安装了 Fluid 主题，到这里就完成了 Hexo 的安装，后续就可以按照自己的喜好开始配置主题和自定义网站。\n\n<br>\n","slug":"post-2","published":1,"updated":"2024-02-05T08:53:31.009Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsa2mbrc0002kkg2cp6h6tnq","content":"<blockquote>\n<p>本文将介绍和总结我参考 Web 上的教程来配置 GitHub Pages 和 Hexo 框架建立博客的大致方法。</p>\n</blockquote>\n<h2 id=\"1-建站原理\"><a href=\"#1-建站原理\" class=\"headerlink\" title=\"1. 建站原理\"></a>1. 建站原理</h2><p>搭建类似本站博客的原理主要有以下四个部分：</p>\n<ol>\n<li><p>博客框架（将用户的输入快速生成由 <code>HTML</code> <code>CSS</code> <code>JavaScript</code> 组成的前端界面，可以对博客进行快速且简便的设置）</p>\n<blockquote>\n<p>常见的博客框架：<code>Hexo</code>  <code>WordPress</code>  <code>VuePress</code>  <code>Hugo</code>  <code>Solo</code>  <code>Halo</code>  <code>Jekyll</code></p>\n</blockquote>\n</li>\n<li><p>代码托管平台（为用户提供访问和修改的接口，将博客所需的文件、代码存放在云端）</p>\n<blockquote>\n<p>常见的平台：<code>GitHub</code>  <code>Gitee</code></p>\n</blockquote>\n</li>\n<li><p>站点部署服务（将博客网站目录部署到互联网以便访问浏览）</p>\n<blockquote>\n<p>常见的部署服务：<code>GitHub Pages</code>  <code>Netify</code></p>\n</blockquote>\n</li>\n<li><p>访问加速服务（CDN 加速，通过多节点缓存来提高网络内容的解析和访问速度） </p>\n<blockquote>\n<p>常见的加速服务：<code>Cloudfare</code>  <code>Alibaba</code>  <code>Tencent</code></p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"2-准备工作\"><a href=\"#2-准备工作\" class=\"headerlink\" title=\"2. 准备工作\"></a>2. 准备工作</h2><h3 id=\"2-1-GitHub-创建仓库\"><a href=\"#2-1-GitHub-创建仓库\" class=\"headerlink\" title=\"2.1 GitHub 创建仓库\"></a>2.1 GitHub 创建仓库</h3><p>首先需要注册一个 GitHub 账号，注册完成进入 GitHub 在 <code>Repositories</code> 中选择 <code>New</code> 新建一个仓库。</p>\n<blockquote>\n<p>注意：<code>Repository name</code> 要按照格式 &lt;<code>username</code>.github.io&gt; 填写，<code>username</code> 是注册时的用户名。</p>\n</blockquote>\n<img src=\"/2023/01/25/post-2/1.png\" class=\"\" title=\"test\">\n\n<h3 id=\"2-2-Git-的安装与配置\"><a href=\"#2-2-Git-的安装与配置\" class=\"headerlink\" title=\"2.2 Git 的安装与配置\"></a>2.2 Git 的安装与配置</h3><blockquote>\n<p>Git 是一个分布式版本控制系统，它用于跟踪计算机文件和协作开发项目。它的设计目标是帮助开发者更好地管理和协作代码，并追踪代码库中的变化。Git 是由 Linus Torvalds 于2005年创建，现在已经成为了开源软件开发的标准工具之一。</p>\n<p>官网 Windows 版下载：<a href=\"https://git-scm.com/download/win\">https://git-scm.com/download/win</a></p>\n</blockquote>\n<p>安装完成后任意路径打开 <code>Git Bash</code>，运行以下代码设置自己的用户名和邮箱：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmd\">git config –global &lt;user_name&gt; // 用户名<br>git config –global &lt;user_email&gt; // 邮箱<br>git config –-list // 查看配置结果<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-1-配置-SSH\"><a href=\"#2-2-1-配置-SSH\" class=\"headerlink\" title=\"2.2.1 配置 SSH\"></a>2.2.1 配置 SSH</h4><img src=\"/2023/01/25/post-2/2.png\" class=\"\">\n\n<p><br><br></p>\n<p>命令行运行以下代码生成 SSH 密匙：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmd\">ssh-keygen -t rsa -C &lt;user_email&gt; // 生成 SSH 密匙<br></code></pre></td></tr></table></figure>\n\n<p>然后到 <code>C:\\Users\\&lt;your_username&gt;\\.ssh</code> 用记事本打开 <code>id_rsa.pub</code>，复制里面的公匙，</p>\n<p>再到 GitHub 里面个人头像依次进入 <code>Settings</code> - <code>SSH and GPG keys</code> - <code>New SSH Key</code> 添加密匙。</p>\n<p>到此即简单完成 Git 的安装和配置，后续也可以使用 SSH 来进行 Git。</p>\n<blockquote>\n<p>https 方式在我这里报错太多遂放弃，而且 SSH 不用每次输密码。</p>\n</blockquote>\n<h3 id=\"2-3-Node-js-的安装与配置\"><a href=\"#2-3-Node-js-的安装与配置\" class=\"headerlink\" title=\"2.3 Node.js 的安装与配置\"></a>2.3 Node.js 的安装与配置</h3><blockquote>\n<p>Node.js（通常简称为Node）是一个用于构建服务器端和网络应用程序的运行时环境。Node.js是基于 Chrome V8 JavaScript 引擎构建的，它允许您使用 JavaScript 编程语言来创建高性能和可伸缩的网络应用程序。</p>\n<p>官网 Windows 版下载：<a href=\"https://nodejs.org/zh-cn/download/\">https://nodejs.org/zh-cn/download/</a></p>\n</blockquote>\n<p>类似于 Git，安装程序如果没有特别要求的选项，一路 Next 即可完成安装。</p>\n<p>安装完成在命令行运行以下可以检查是否安装成功，即顺利显示版本号：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmd\">node -v<br>npm -v<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-1-环境变量配置\"><a href=\"#2-3-1-环境变量配置\" class=\"headerlink\" title=\"2.3.1 环境变量配置\"></a>2.3.1 环境变量配置</h4><blockquote>\n<p>在上面已经完成了 Node 的安装，尽管不进行这个步骤也不影响正常使用，</p>\n<p>但是不进行此步骤，在 Node.js 安装全局模板时，会默认存储到 <code>C:\\Users\\&lt;your_username&gt;\\AppData\\Roaming\\npm</code> 里面，</p>\n<p>所以最好可以配置<strong>全局安装模板</strong> <code>node_gobal</code> 和<strong>缓存目录</strong> <code>node_cache</code> 这两个模块。</p>\n</blockquote>\n<ul>\n<li>在安装目录中，分别新建以下两个文件夹:</li>\n</ul>\n<img src=\"/2023/01/25/post-2/3.png\" class=\"\">\n\n<br>\n\n<br>\n\n<ul>\n<li>然后在命令行运行以下代码：</li>\n</ul>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmd\">npm config <span class=\"hljs-built_in\">set</span> prefix &quot;&lt;node_gobal&gt;&quot; // 替换node_gobal的路径<br>npm config <span class=\"hljs-built_in\">set</span> cache &quot;&lt;node_cache&gt;&quot; // 替换node_cache的路径<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><code>系统变量</code> 中新建变量：<ul>\n<li>变量名：<code>NODE_PATH</code></li>\n<li>变量值：<code>Node的安装路径</code></li>\n</ul>\n</li>\n</ul>\n<img src=\"/2023/01/25/post-2/4.png\" class=\"\">\n\n<br>\n\n<br>\n\n<ul>\n<li><code>系统变量</code> 中编辑 <code>PATH</code> 添加如下变量值：<ul>\n<li><code>%NODE_PATH%</code></li>\n<li><code>%NODE_PATH%\\node_gobal</code></li>\n<li><code>%NODE_PATH%\\node_cache</code></li>\n</ul>\n</li>\n</ul>\n<img src=\"/2023/01/25/post-2/5.png\" class=\"\"> \n\n<br>\n\n<br>\n\n<p>到此完成 Node 的环境变量配置，接下来开始安装 Hexo 框架。</p>\n<h2 id=\"3-Hexo-安装\"><a href=\"#3-Hexo-安装\" class=\"headerlink\" title=\"3. Hexo 安装\"></a>3. Hexo 安装</h2><blockquote>\n<p>Hexo 是一个快速、简单且强大的静态博客生成器，基于 Node.js 开发。它允许用户使用 Markdown 格式的文本来撰写博客文章，然后将这些文章转换成静态 HTML 页面，方便发布在网站上。Hexo 的目标是提供一个轻松管理和发布博客内容的解决方案，同时具备高度可定制性。</p>\n</blockquote>\n<ul>\n<li>运行 <code>Git Bash</code>：</li>\n</ul>\n<img src=\"/2023/01/25/post-2/6.png\" class=\"\">\n\n<br>\n\n<br>\n\n<ul>\n<li>如上面所有必备的准备工作和程序安装完成后，即可开始使用 npm 安装 Hexo：</li>\n</ul>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmd\">npm install -g hexo-cli // npm方式安装Hexo<br>npm -v // 查询版本号确认是否安装成功<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件：</li>\n</ul>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmd\">hexo init &lt;folder&gt;<br><span class=\"hljs-built_in\">cd</span> &lt;folder&gt;<br>npm install<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>运行 Hexo：</li>\n</ul>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmd\">hexo clean // 清理缓存<br>hexo g // 生成静态文件<br>hexo s // 运行本地服务器<br></code></pre></td></tr></table></figure>\n\n<img src=\"/2023/01/25/post-2/7.png\" class=\"\">\n\n<br>\n\n<br>\n\n<p>最后本地使用浏览器打开 <code>http://127.0.0.1:4000</code> 即可以显示初始化的 Hexo 主题，上图我已经安装了 Fluid 主题，到这里就完成了 Hexo 的安装，后续就可以按照自己的喜好开始配置主题和自定义网站。</p>\n<br>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>本文将介绍和总结我参考 Web 上的教程来配置 GitHub Pages 和 Hexo 框架建立博客的大致方法。</p>\n</blockquote>\n<h2 id=\"1-建站原理\"><a href=\"#1-建站原理\" class=\"headerlink\" title=\"1. 建站原理\"></a>1. 建站原理</h2><p>搭建类似本站博客的原理主要有以下四个部分：</p>\n<ol>\n<li><p>博客框架（将用户的输入快速生成由 <code>HTML</code> <code>CSS</code> <code>JavaScript</code> 组成的前端界面，可以对博客进行快速且简便的设置）</p>\n<blockquote>\n<p>常见的博客框架：<code>Hexo</code>  <code>WordPress</code>  <code>VuePress</code>  <code>Hugo</code>  <code>Solo</code>  <code>Halo</code>  <code>Jekyll</code></p>\n</blockquote>\n</li>\n<li><p>代码托管平台（为用户提供访问和修改的接口，将博客所需的文件、代码存放在云端）</p>\n<blockquote>\n<p>常见的平台：<code>GitHub</code>  <code>Gitee</code></p>\n</blockquote>\n</li>\n<li><p>站点部署服务（将博客网站目录部署到互联网以便访问浏览）</p>\n<blockquote>\n<p>常见的部署服务：<code>GitHub Pages</code>  <code>Netify</code></p>\n</blockquote>\n</li>\n<li><p>访问加速服务（CDN 加速，通过多节点缓存来提高网络内容的解析和访问速度） </p>\n<blockquote>\n<p>常见的加速服务：<code>Cloudfare</code>  <code>Alibaba</code>  <code>Tencent</code></p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"2-准备工作\"><a href=\"#2-准备工作\" class=\"headerlink\" title=\"2. 准备工作\"></a>2. 准备工作</h2><h3 id=\"2-1-GitHub-创建仓库\"><a href=\"#2-1-GitHub-创建仓库\" class=\"headerlink\" title=\"2.1 GitHub 创建仓库\"></a>2.1 GitHub 创建仓库</h3><p>首先需要注册一个 GitHub 账号，注册完成进入 GitHub 在 <code>Repositories</code> 中选择 <code>New</code> 新建一个仓库。</p>\n<blockquote>\n<p>注意：<code>Repository name</code> 要按照格式 &lt;<code>username</code>.github.io&gt; 填写，<code>username</code> 是注册时的用户名。</p>\n</blockquote>\n<img src=\"/2023/01/25/post-2/1.png\" class=\"\" title=\"test\">\n\n<h3 id=\"2-2-Git-的安装与配置\"><a href=\"#2-2-Git-的安装与配置\" class=\"headerlink\" title=\"2.2 Git 的安装与配置\"></a>2.2 Git 的安装与配置</h3><blockquote>\n<p>Git 是一个分布式版本控制系统，它用于跟踪计算机文件和协作开发项目。它的设计目标是帮助开发者更好地管理和协作代码，并追踪代码库中的变化。Git 是由 Linus Torvalds 于2005年创建，现在已经成为了开源软件开发的标准工具之一。</p>\n<p>官网 Windows 版下载：<a href=\"https://git-scm.com/download/win\">https://git-scm.com/download/win</a></p>\n</blockquote>\n<p>安装完成后任意路径打开 <code>Git Bash</code>，运行以下代码设置自己的用户名和邮箱：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmd\">git config –global &lt;user_name&gt; // 用户名<br>git config –global &lt;user_email&gt; // 邮箱<br>git config –-list // 查看配置结果<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-1-配置-SSH\"><a href=\"#2-2-1-配置-SSH\" class=\"headerlink\" title=\"2.2.1 配置 SSH\"></a>2.2.1 配置 SSH</h4><img src=\"/2023/01/25/post-2/2.png\" class=\"\">\n\n<p><br><br></p>\n<p>命令行运行以下代码生成 SSH 密匙：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmd\">ssh-keygen -t rsa -C &lt;user_email&gt; // 生成 SSH 密匙<br></code></pre></td></tr></table></figure>\n\n<p>然后到 <code>C:\\Users\\&lt;your_username&gt;\\.ssh</code> 用记事本打开 <code>id_rsa.pub</code>，复制里面的公匙，</p>\n<p>再到 GitHub 里面个人头像依次进入 <code>Settings</code> - <code>SSH and GPG keys</code> - <code>New SSH Key</code> 添加密匙。</p>\n<p>到此即简单完成 Git 的安装和配置，后续也可以使用 SSH 来进行 Git。</p>\n<blockquote>\n<p>https 方式在我这里报错太多遂放弃，而且 SSH 不用每次输密码。</p>\n</blockquote>\n<h3 id=\"2-3-Node-js-的安装与配置\"><a href=\"#2-3-Node-js-的安装与配置\" class=\"headerlink\" title=\"2.3 Node.js 的安装与配置\"></a>2.3 Node.js 的安装与配置</h3><blockquote>\n<p>Node.js（通常简称为Node）是一个用于构建服务器端和网络应用程序的运行时环境。Node.js是基于 Chrome V8 JavaScript 引擎构建的，它允许您使用 JavaScript 编程语言来创建高性能和可伸缩的网络应用程序。</p>\n<p>官网 Windows 版下载：<a href=\"https://nodejs.org/zh-cn/download/\">https://nodejs.org/zh-cn/download/</a></p>\n</blockquote>\n<p>类似于 Git，安装程序如果没有特别要求的选项，一路 Next 即可完成安装。</p>\n<p>安装完成在命令行运行以下可以检查是否安装成功，即顺利显示版本号：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmd\">node -v<br>npm -v<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-1-环境变量配置\"><a href=\"#2-3-1-环境变量配置\" class=\"headerlink\" title=\"2.3.1 环境变量配置\"></a>2.3.1 环境变量配置</h4><blockquote>\n<p>在上面已经完成了 Node 的安装，尽管不进行这个步骤也不影响正常使用，</p>\n<p>但是不进行此步骤，在 Node.js 安装全局模板时，会默认存储到 <code>C:\\Users\\&lt;your_username&gt;\\AppData\\Roaming\\npm</code> 里面，</p>\n<p>所以最好可以配置<strong>全局安装模板</strong> <code>node_gobal</code> 和<strong>缓存目录</strong> <code>node_cache</code> 这两个模块。</p>\n</blockquote>\n<ul>\n<li>在安装目录中，分别新建以下两个文件夹:</li>\n</ul>\n<img src=\"/2023/01/25/post-2/3.png\" class=\"\">\n\n<br>\n\n<br>\n\n<ul>\n<li>然后在命令行运行以下代码：</li>\n</ul>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmd\">npm config <span class=\"hljs-built_in\">set</span> prefix &quot;&lt;node_gobal&gt;&quot; // 替换node_gobal的路径<br>npm config <span class=\"hljs-built_in\">set</span> cache &quot;&lt;node_cache&gt;&quot; // 替换node_cache的路径<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><code>系统变量</code> 中新建变量：<ul>\n<li>变量名：<code>NODE_PATH</code></li>\n<li>变量值：<code>Node的安装路径</code></li>\n</ul>\n</li>\n</ul>\n<img src=\"/2023/01/25/post-2/4.png\" class=\"\">\n\n<br>\n\n<br>\n\n<ul>\n<li><code>系统变量</code> 中编辑 <code>PATH</code> 添加如下变量值：<ul>\n<li><code>%NODE_PATH%</code></li>\n<li><code>%NODE_PATH%\\node_gobal</code></li>\n<li><code>%NODE_PATH%\\node_cache</code></li>\n</ul>\n</li>\n</ul>\n<img src=\"/2023/01/25/post-2/5.png\" class=\"\"> \n\n<br>\n\n<br>\n\n<p>到此完成 Node 的环境变量配置，接下来开始安装 Hexo 框架。</p>\n<h2 id=\"3-Hexo-安装\"><a href=\"#3-Hexo-安装\" class=\"headerlink\" title=\"3. Hexo 安装\"></a>3. Hexo 安装</h2><blockquote>\n<p>Hexo 是一个快速、简单且强大的静态博客生成器，基于 Node.js 开发。它允许用户使用 Markdown 格式的文本来撰写博客文章，然后将这些文章转换成静态 HTML 页面，方便发布在网站上。Hexo 的目标是提供一个轻松管理和发布博客内容的解决方案，同时具备高度可定制性。</p>\n</blockquote>\n<ul>\n<li>运行 <code>Git Bash</code>：</li>\n</ul>\n<img src=\"/2023/01/25/post-2/6.png\" class=\"\">\n\n<br>\n\n<br>\n\n<ul>\n<li>如上面所有必备的准备工作和程序安装完成后，即可开始使用 npm 安装 Hexo：</li>\n</ul>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmd\">npm install -g hexo-cli // npm方式安装Hexo<br>npm -v // 查询版本号确认是否安装成功<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件：</li>\n</ul>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmd\">hexo init &lt;folder&gt;<br><span class=\"hljs-built_in\">cd</span> &lt;folder&gt;<br>npm install<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>运行 Hexo：</li>\n</ul>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmd\">hexo clean // 清理缓存<br>hexo g // 生成静态文件<br>hexo s // 运行本地服务器<br></code></pre></td></tr></table></figure>\n\n<img src=\"/2023/01/25/post-2/7.png\" class=\"\">\n\n<br>\n\n<br>\n\n<p>最后本地使用浏览器打开 <code>http://127.0.0.1:4000</code> 即可以显示初始化的 Hexo 主题，上图我已经安装了 Fluid 主题，到这里就完成了 Hexo 的安装，后续就可以按照自己的喜好开始配置主题和自定义网站。</p>\n<br>\n"},{"title":"Visual Studio Code 中配置 C/C++ 运行环境","date":"2023-04-23T12:57:42.000Z","index_img":"/img/post-3.jpg","_content":"\n> VS Code 作为一款轻量级的代码编辑器，在我学习前端的时候就已经爱不释手，可以说是程序员人手必备的编辑器。但在学习 C 的阶段，由于觉得 Visual Studio 2022 比较臃肿，所以便对想在 VS Code 中配置 C/C++ 的编译环境，以下将介绍大致的方法。\n\n## 1. MinGW 编译器安装\n\n> MinGW（Minimalist GNU for Windows）是一个用于 Windows 平台的开发工具集，它允许开发者在 Windows 操作系统上使用 GNU 工具集来编译和构建软件，包括 C、C++ 和其他编程语言。MinGW 的目标是提供一个轻量级、开源的开发环境，使开发者能够在 Windows 上进行跨平台的开发。\n>\n> 下载地址：[Sourgeforce](https://sourceforge.net/projects/mingw-w64/files/)\n\n\n\n> 第二种方法可以通过 VS Code 官方教程中提到的 MSYS2 来安装，下面还是继续介绍比较多人选择的方式。\n>\n> 参考：（[Get Started with C++ and MinGW-w64 in Visual Studio Code](https://code.visualstudio.com/docs/cpp/config-mingw)）\n\n<br/>\n\n进入地址后找到并选择 GCC-8.1.0 中的 `x86_64-win32-seh` 下载：\n\n{% asset_img 1.png %}\n\n<br/>\n\n<br/>\n\n下载完成解压到系统非中文路径，解压后的结构如下：\n\n{% asset_img 2.png %}\n\n<br/>\n\n<br/>\n\n接着编辑环境变量 `Path`，添加 `bin` 路径：\n\n{% asset_img 3.png %}\n\n## 2. VS Code 插件配置\n\n在 VS Code 扩展商店中搜索并下载 C/C++ 插件安装：\n\n{% asset_img 4.png %}\n\n<br/>\n\n<br/>\n\n接下来新建任意文件夹，编写一个 `test.c` 并输入简单的 C 代码：\n\n```c\n#include <stdio.h>\n\nint main(void) \n{\n    printf(\"Hello, World!\\n\");\n    return 0;\n}\n```\n\n然后键盘操作 `Ctrl + Shif + P` 呼出菜单选择 `C/C++:编辑配置(UI)`，如红框所示选择 MinGW 的 `bin` 路径中的 `gcc.exe` 作为编译器，同时智能代码提示 `IntelliSense` 模式选择 `gcc-x64 (legacy)`：\n\n{% asset_img 7.png %}\n\n## 3. 编译任务配置生成\n\n上述 C 代码编写完成后，通过菜单栏或快捷键 `Ctrl + Shif + B` 运行生成任务：\n\n{% asset_img 8.png %}\n\n<br/>\n\n<br/>\n\n此时会生成一个 `tasks.json` 文件：\n\n{% asset_img 9.png %}\n\n## 4. 可执行程序运行\n\n编译任务完成后，会发现工作目录生成了 `[filename].exe` 可执行程序，在终端输入 `./[filename].exe` 即可以执行程序并输出结果。（我这里编辑了一些设置，所以生成路径不一样。）\n\n>一般很多人都喜欢用 Windows 的黑框命令提示符，但是其实在 VS Code 中自带的终端是可以解决诸如程序运行一闪而过的问题，可以省去一些额外的配置。\n\n{% asset_img 10.png %}\n\n## 5. 中文问题解决\n\n在中文环境下，中文字符和文件名都可能会造成乱码和编译错误的问题，解决办法如果\n\n{% asset_img 6.png %}\n\n在 `task.json` 第 13 行添加以下代码，不要忘记上一行最后有一个 `,` 逗号。\n\n```json\n\"-fexec-charset=GBK\"\n```\n\n## 6. 设置 tasks.json 文件\n\n如果想要输出的可执行文件更加简洁统一，可以按照以下设置：\n\n在第 12 行中按如下格式可以将编译后的exe文件统一保存到executable files这个文件夹中，具体可以自定义，这样就可以统一整理exe文件，默认是保存在根目录。\n\n```json\n\"program\": \"${fileDirname}\\\\executable files\\\\${fileBasenameNoExtension}.exe\",\n```\n\n> 其实这里涉及到了生成 & 编译路径的一些配置和同时编译多文件这些问题，这里不详细展开，具体需要参考官方文档。参考：[Visual Studio Code Variables Reference](https://code.visualstudio.com/docs/editor/variables-reference)\n","source":"_posts/post-3.md","raw":"---\ntitle: Visual Studio Code 中配置 C/C++ 运行环境\ndate: 2023-04-23 20:57:42\nindex_img: /img/post-3.jpg\ntags: C/C++环境\n---\n\n> VS Code 作为一款轻量级的代码编辑器，在我学习前端的时候就已经爱不释手，可以说是程序员人手必备的编辑器。但在学习 C 的阶段，由于觉得 Visual Studio 2022 比较臃肿，所以便对想在 VS Code 中配置 C/C++ 的编译环境，以下将介绍大致的方法。\n\n## 1. MinGW 编译器安装\n\n> MinGW（Minimalist GNU for Windows）是一个用于 Windows 平台的开发工具集，它允许开发者在 Windows 操作系统上使用 GNU 工具集来编译和构建软件，包括 C、C++ 和其他编程语言。MinGW 的目标是提供一个轻量级、开源的开发环境，使开发者能够在 Windows 上进行跨平台的开发。\n>\n> 下载地址：[Sourgeforce](https://sourceforge.net/projects/mingw-w64/files/)\n\n\n\n> 第二种方法可以通过 VS Code 官方教程中提到的 MSYS2 来安装，下面还是继续介绍比较多人选择的方式。\n>\n> 参考：（[Get Started with C++ and MinGW-w64 in Visual Studio Code](https://code.visualstudio.com/docs/cpp/config-mingw)）\n\n<br/>\n\n进入地址后找到并选择 GCC-8.1.0 中的 `x86_64-win32-seh` 下载：\n\n{% asset_img 1.png %}\n\n<br/>\n\n<br/>\n\n下载完成解压到系统非中文路径，解压后的结构如下：\n\n{% asset_img 2.png %}\n\n<br/>\n\n<br/>\n\n接着编辑环境变量 `Path`，添加 `bin` 路径：\n\n{% asset_img 3.png %}\n\n## 2. VS Code 插件配置\n\n在 VS Code 扩展商店中搜索并下载 C/C++ 插件安装：\n\n{% asset_img 4.png %}\n\n<br/>\n\n<br/>\n\n接下来新建任意文件夹，编写一个 `test.c` 并输入简单的 C 代码：\n\n```c\n#include <stdio.h>\n\nint main(void) \n{\n    printf(\"Hello, World!\\n\");\n    return 0;\n}\n```\n\n然后键盘操作 `Ctrl + Shif + P` 呼出菜单选择 `C/C++:编辑配置(UI)`，如红框所示选择 MinGW 的 `bin` 路径中的 `gcc.exe` 作为编译器，同时智能代码提示 `IntelliSense` 模式选择 `gcc-x64 (legacy)`：\n\n{% asset_img 7.png %}\n\n## 3. 编译任务配置生成\n\n上述 C 代码编写完成后，通过菜单栏或快捷键 `Ctrl + Shif + B` 运行生成任务：\n\n{% asset_img 8.png %}\n\n<br/>\n\n<br/>\n\n此时会生成一个 `tasks.json` 文件：\n\n{% asset_img 9.png %}\n\n## 4. 可执行程序运行\n\n编译任务完成后，会发现工作目录生成了 `[filename].exe` 可执行程序，在终端输入 `./[filename].exe` 即可以执行程序并输出结果。（我这里编辑了一些设置，所以生成路径不一样。）\n\n>一般很多人都喜欢用 Windows 的黑框命令提示符，但是其实在 VS Code 中自带的终端是可以解决诸如程序运行一闪而过的问题，可以省去一些额外的配置。\n\n{% asset_img 10.png %}\n\n## 5. 中文问题解决\n\n在中文环境下，中文字符和文件名都可能会造成乱码和编译错误的问题，解决办法如果\n\n{% asset_img 6.png %}\n\n在 `task.json` 第 13 行添加以下代码，不要忘记上一行最后有一个 `,` 逗号。\n\n```json\n\"-fexec-charset=GBK\"\n```\n\n## 6. 设置 tasks.json 文件\n\n如果想要输出的可执行文件更加简洁统一，可以按照以下设置：\n\n在第 12 行中按如下格式可以将编译后的exe文件统一保存到executable files这个文件夹中，具体可以自定义，这样就可以统一整理exe文件，默认是保存在根目录。\n\n```json\n\"program\": \"${fileDirname}\\\\executable files\\\\${fileBasenameNoExtension}.exe\",\n```\n\n> 其实这里涉及到了生成 & 编译路径的一些配置和同时编译多文件这些问题，这里不详细展开，具体需要参考官方文档。参考：[Visual Studio Code Variables Reference](https://code.visualstudio.com/docs/editor/variables-reference)\n","slug":"post-3","published":1,"updated":"2024-02-05T08:53:31.049Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsa2mbrd0003kkg28lonf95e","content":"<blockquote>\n<p>VS Code 作为一款轻量级的代码编辑器，在我学习前端的时候就已经爱不释手，可以说是程序员人手必备的编辑器。但在学习 C 的阶段，由于觉得 Visual Studio 2022 比较臃肿，所以便对想在 VS Code 中配置 C&#x2F;C++ 的编译环境，以下将介绍大致的方法。</p>\n</blockquote>\n<h2 id=\"1-MinGW-编译器安装\"><a href=\"#1-MinGW-编译器安装\" class=\"headerlink\" title=\"1. MinGW 编译器安装\"></a>1. MinGW 编译器安装</h2><blockquote>\n<p>MinGW（Minimalist GNU for Windows）是一个用于 Windows 平台的开发工具集，它允许开发者在 Windows 操作系统上使用 GNU 工具集来编译和构建软件，包括 C、C++ 和其他编程语言。MinGW 的目标是提供一个轻量级、开源的开发环境，使开发者能够在 Windows 上进行跨平台的开发。</p>\n<p>下载地址：<a href=\"https://sourceforge.net/projects/mingw-w64/files/\">Sourgeforce</a></p>\n</blockquote>\n<blockquote>\n<p>第二种方法可以通过 VS Code 官方教程中提到的 MSYS2 来安装，下面还是继续介绍比较多人选择的方式。</p>\n<p>参考：（<a href=\"https://code.visualstudio.com/docs/cpp/config-mingw\">Get Started with C++ and MinGW-w64 in Visual Studio Code</a>）</p>\n</blockquote>\n<br/>\n\n<p>进入地址后找到并选择 GCC-8.1.0 中的 <code>x86_64-win32-seh</code> 下载：</p>\n<img src=\"/2023/04/23/post-3/1.png\" class=\"\">\n\n<br/>\n\n<br/>\n\n<p>下载完成解压到系统非中文路径，解压后的结构如下：</p>\n<img src=\"/2023/04/23/post-3/2.png\" class=\"\">\n\n<br/>\n\n<br/>\n\n<p>接着编辑环境变量 <code>Path</code>，添加 <code>bin</code> 路径：</p>\n<img src=\"/2023/04/23/post-3/3.png\" class=\"\">\n\n<h2 id=\"2-VS-Code-插件配置\"><a href=\"#2-VS-Code-插件配置\" class=\"headerlink\" title=\"2. VS Code 插件配置\"></a>2. VS Code 插件配置</h2><p>在 VS Code 扩展商店中搜索并下载 C&#x2F;C++ 插件安装：</p>\n<img src=\"/2023/04/23/post-3/4.png\" class=\"\">\n\n<br/>\n\n<br/>\n\n<p>接下来新建任意文件夹，编写一个 <code>test.c</code> 并输入简单的 C 代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span> <br>&#123;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Hello, World!\\n&quot;</span>);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>然后键盘操作 <code>Ctrl + Shif + P</code> 呼出菜单选择 <code>C/C++:编辑配置(UI)</code>，如红框所示选择 MinGW 的 <code>bin</code> 路径中的 <code>gcc.exe</code> 作为编译器，同时智能代码提示 <code>IntelliSense</code> 模式选择 <code>gcc-x64 (legacy)</code>：</p>\n<img src=\"/2023/04/23/post-3/7.png\" class=\"\">\n\n<h2 id=\"3-编译任务配置生成\"><a href=\"#3-编译任务配置生成\" class=\"headerlink\" title=\"3. 编译任务配置生成\"></a>3. 编译任务配置生成</h2><p>上述 C 代码编写完成后，通过菜单栏或快捷键 <code>Ctrl + Shif + B</code> 运行生成任务：</p>\n<img src=\"/2023/04/23/post-3/8.png\" class=\"\">\n\n<br/>\n\n<br/>\n\n<p>此时会生成一个 <code>tasks.json</code> 文件：</p>\n<img src=\"/2023/04/23/post-3/9.png\" class=\"\">\n\n<h2 id=\"4-可执行程序运行\"><a href=\"#4-可执行程序运行\" class=\"headerlink\" title=\"4. 可执行程序运行\"></a>4. 可执行程序运行</h2><p>编译任务完成后，会发现工作目录生成了 <code>[filename].exe</code> 可执行程序，在终端输入 <code>./[filename].exe</code> 即可以执行程序并输出结果。（我这里编辑了一些设置，所以生成路径不一样。）</p>\n<blockquote>\n<p>一般很多人都喜欢用 Windows 的黑框命令提示符，但是其实在 VS Code 中自带的终端是可以解决诸如程序运行一闪而过的问题，可以省去一些额外的配置。</p>\n</blockquote>\n<img src=\"/2023/04/23/post-3/10.png\" class=\"\">\n\n<h2 id=\"5-中文问题解决\"><a href=\"#5-中文问题解决\" class=\"headerlink\" title=\"5. 中文问题解决\"></a>5. 中文问题解决</h2><p>在中文环境下，中文字符和文件名都可能会造成乱码和编译错误的问题，解决办法如果</p>\n<img src=\"/2023/04/23/post-3/6.png\" class=\"\">\n\n<p>在 <code>task.json</code> 第 13 行添加以下代码，不要忘记上一行最后有一个 <code>,</code> 逗号。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-string\">&quot;-fexec-charset=GBK&quot;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"6-设置-tasks-json-文件\"><a href=\"#6-设置-tasks-json-文件\" class=\"headerlink\" title=\"6. 设置 tasks.json 文件\"></a>6. 设置 tasks.json 文件</h2><p>如果想要输出的可执行文件更加简洁统一，可以按照以下设置：</p>\n<p>在第 12 行中按如下格式可以将编译后的exe文件统一保存到executable files这个文件夹中，具体可以自定义，这样就可以统一整理exe文件，默认是保存在根目录。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-attr\">&quot;program&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;$&#123;fileDirname&#125;\\\\executable files\\\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class=\"hljs-punctuation\">,</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>其实这里涉及到了生成 &amp; 编译路径的一些配置和同时编译多文件这些问题，这里不详细展开，具体需要参考官方文档。参考：<a href=\"https://code.visualstudio.com/docs/editor/variables-reference\">Visual Studio Code Variables Reference</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>VS Code 作为一款轻量级的代码编辑器，在我学习前端的时候就已经爱不释手，可以说是程序员人手必备的编辑器。但在学习 C 的阶段，由于觉得 Visual Studio 2022 比较臃肿，所以便对想在 VS Code 中配置 C&#x2F;C++ 的编译环境，以下将介绍大致的方法。</p>\n</blockquote>\n<h2 id=\"1-MinGW-编译器安装\"><a href=\"#1-MinGW-编译器安装\" class=\"headerlink\" title=\"1. MinGW 编译器安装\"></a>1. MinGW 编译器安装</h2><blockquote>\n<p>MinGW（Minimalist GNU for Windows）是一个用于 Windows 平台的开发工具集，它允许开发者在 Windows 操作系统上使用 GNU 工具集来编译和构建软件，包括 C、C++ 和其他编程语言。MinGW 的目标是提供一个轻量级、开源的开发环境，使开发者能够在 Windows 上进行跨平台的开发。</p>\n<p>下载地址：<a href=\"https://sourceforge.net/projects/mingw-w64/files/\">Sourgeforce</a></p>\n</blockquote>\n<blockquote>\n<p>第二种方法可以通过 VS Code 官方教程中提到的 MSYS2 来安装，下面还是继续介绍比较多人选择的方式。</p>\n<p>参考：（<a href=\"https://code.visualstudio.com/docs/cpp/config-mingw\">Get Started with C++ and MinGW-w64 in Visual Studio Code</a>）</p>\n</blockquote>\n<br/>\n\n<p>进入地址后找到并选择 GCC-8.1.0 中的 <code>x86_64-win32-seh</code> 下载：</p>\n<img src=\"/2023/04/23/post-3/1.png\" class=\"\">\n\n<br/>\n\n<br/>\n\n<p>下载完成解压到系统非中文路径，解压后的结构如下：</p>\n<img src=\"/2023/04/23/post-3/2.png\" class=\"\">\n\n<br/>\n\n<br/>\n\n<p>接着编辑环境变量 <code>Path</code>，添加 <code>bin</code> 路径：</p>\n<img src=\"/2023/04/23/post-3/3.png\" class=\"\">\n\n<h2 id=\"2-VS-Code-插件配置\"><a href=\"#2-VS-Code-插件配置\" class=\"headerlink\" title=\"2. VS Code 插件配置\"></a>2. VS Code 插件配置</h2><p>在 VS Code 扩展商店中搜索并下载 C&#x2F;C++ 插件安装：</p>\n<img src=\"/2023/04/23/post-3/4.png\" class=\"\">\n\n<br/>\n\n<br/>\n\n<p>接下来新建任意文件夹，编写一个 <code>test.c</code> 并输入简单的 C 代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span> <br>&#123;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Hello, World!\\n&quot;</span>);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>然后键盘操作 <code>Ctrl + Shif + P</code> 呼出菜单选择 <code>C/C++:编辑配置(UI)</code>，如红框所示选择 MinGW 的 <code>bin</code> 路径中的 <code>gcc.exe</code> 作为编译器，同时智能代码提示 <code>IntelliSense</code> 模式选择 <code>gcc-x64 (legacy)</code>：</p>\n<img src=\"/2023/04/23/post-3/7.png\" class=\"\">\n\n<h2 id=\"3-编译任务配置生成\"><a href=\"#3-编译任务配置生成\" class=\"headerlink\" title=\"3. 编译任务配置生成\"></a>3. 编译任务配置生成</h2><p>上述 C 代码编写完成后，通过菜单栏或快捷键 <code>Ctrl + Shif + B</code> 运行生成任务：</p>\n<img src=\"/2023/04/23/post-3/8.png\" class=\"\">\n\n<br/>\n\n<br/>\n\n<p>此时会生成一个 <code>tasks.json</code> 文件：</p>\n<img src=\"/2023/04/23/post-3/9.png\" class=\"\">\n\n<h2 id=\"4-可执行程序运行\"><a href=\"#4-可执行程序运行\" class=\"headerlink\" title=\"4. 可执行程序运行\"></a>4. 可执行程序运行</h2><p>编译任务完成后，会发现工作目录生成了 <code>[filename].exe</code> 可执行程序，在终端输入 <code>./[filename].exe</code> 即可以执行程序并输出结果。（我这里编辑了一些设置，所以生成路径不一样。）</p>\n<blockquote>\n<p>一般很多人都喜欢用 Windows 的黑框命令提示符，但是其实在 VS Code 中自带的终端是可以解决诸如程序运行一闪而过的问题，可以省去一些额外的配置。</p>\n</blockquote>\n<img src=\"/2023/04/23/post-3/10.png\" class=\"\">\n\n<h2 id=\"5-中文问题解决\"><a href=\"#5-中文问题解决\" class=\"headerlink\" title=\"5. 中文问题解决\"></a>5. 中文问题解决</h2><p>在中文环境下，中文字符和文件名都可能会造成乱码和编译错误的问题，解决办法如果</p>\n<img src=\"/2023/04/23/post-3/6.png\" class=\"\">\n\n<p>在 <code>task.json</code> 第 13 行添加以下代码，不要忘记上一行最后有一个 <code>,</code> 逗号。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-string\">&quot;-fexec-charset=GBK&quot;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"6-设置-tasks-json-文件\"><a href=\"#6-设置-tasks-json-文件\" class=\"headerlink\" title=\"6. 设置 tasks.json 文件\"></a>6. 设置 tasks.json 文件</h2><p>如果想要输出的可执行文件更加简洁统一，可以按照以下设置：</p>\n<p>在第 12 行中按如下格式可以将编译后的exe文件统一保存到executable files这个文件夹中，具体可以自定义，这样就可以统一整理exe文件，默认是保存在根目录。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-attr\">&quot;program&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;$&#123;fileDirname&#125;\\\\executable files\\\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class=\"hljs-punctuation\">,</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>其实这里涉及到了生成 &amp; 编译路径的一些配置和同时编译多文件这些问题，这里不详细展开，具体需要参考官方文档。参考：<a href=\"https://code.visualstudio.com/docs/editor/variables-reference\">Visual Studio Code Variables Reference</a></p>\n</blockquote>\n"},{"title":"C 语言数据存储基础","date":"2023-09-25T13:55:00.000Z","index_img":"/img/post-4.png","_content":"\n> 本文介绍 C 语言数据存储的详细内容。\n\n## 1. 数据类型\n\n### 1.1 类型的基本归类\n\nC语言中有多种基本数据类型，包括整数、浮点数、字符等。这些数据类型在内存中占用的空间大小不同，例如，int通常占用4个字节，float占用4个字节，char占用1个字节。数据类型决定了数据在内存中的存储方式和表示形式，可以分为以下的五大类型：\n\n### 1.1.1 整型\n\n```c\nchar\n\tunsigned char\n\tsigned char\nshort\n\tunsigned short [int]\n\tsigned short [int]\nint \n\tunsigned int\n\tsigned int\nlong\n\tunsigned long\n\tsigned long [int]\n```\n\n### 1.1.2 浮点型\n\n```c\nfloat\ndouble\n```\n\n### 1.1.3 构造类型\n\n```c\narray // 数组类型\nstruct // 结构体类型 \nenum // 枚举类型 \nunion // 联合类型\n```\n\n### 1.1.4 指针类型\n\n```\nint *ptr\nchar *ptr\nfloat *ptr\nvoid *ptr\n```\n\n### 1.1.5 空类型\n\n```\nvoid // 函数参数、返回类型、指针\n```\n\n## 2. 整形在内存中的存储\n\nC 变量的创建是根据数据类型在内存中开辟空间。\n\n### 2.1 原码、反码、补码\n\n数据在内存中以 2 进制的形式存储，以整数举例，其 2 进制存储有三种表示形式。\n\n正整数：原码、反码、补码相同。\n\n负整数：原码、反码、补码要进行计算。\n\n举例代码：\n\n```\nint a = -10;\n// 10000000 00000000 00000000 00001010 - 原码（原始 2 进制表示形式）\n// 11111111 11111111 11111111 11110101 - 反码（符号位不变，其它位按位取反）\n// 11111111 11111111 11111111 11110110 - 补码（反码 + 1）\n```\n\nVS Code 调试取 `&a` 的地址后可以观察发现 16 进制的内存地址所存储的数据为 `F6 FF FF FF`，这恰好是 2 进制补码的 16 进制数，同时表明了整数在内存中存储的是补码。\n\n{% asset_img 1.png %}\n\n<br/>\n\n<br/>\n\n> 为什么数据在内存中存放的是补码：因为在计算机组成原理中，补码可以将符号位和数值域统一处理，加法和减法也可以统一处理（CPU只有加法器），此外补码和原码相互转换，运算过程是相同的，无需额外的逻辑硬件电路。\n\n举例代码：\n\n```c\nint main()\n{\n\t// 1 - 1;\n\t// 1 + (-1);\n\t// 00000000 00000000 00000000 00000001 - 1的原码\n\t// 10000000 00000000 00000000 00000001 - -1的原码\n    // 如果计算机采用原码进行逻辑加减（1+（-1）），得到结果数值如下\n    // 10000000 00000000 00000000 00000010 - 是-2？可以看到数值是错误的。\n\t// 如果采用补码运算，数值才是正确的，这是计算机组成底层原理的逻辑。\n}\n```\n\n### 2.2 大端字节序和小端字节序\n\n字节序（Byte Order）是指多字节数据在计算机内存中存储时的顺序。字节序分为两种主要类型：大端字节序（Big-Endian）和小端字节序（Little-Endian）。\n\n1. **大端字节序（Big-Endian）**：\n\n   - 在大端字节序中，多字节数据的最高有效字节（Most Significant Byte，MSB）存储在内存的最低地址处，而最低有效字节（Least Significant Byte，LSB）存储在内存的最高地址处。\n   - 大端字节序的表示方式类似于阅读书写的方式，先读取最高位的字节，然后是次高位，以此类推。\n\n   例如，十六进制数0x12345678在大端字节序中存储为：\n\n   ```c\n   0x12 0x34 0x56 0x78\n   ```\n   \n2. **小端字节序（Little-Endian）**：\n\n   - 在小端字节序中，多字节数据的最低有效字节（LSB）存储在内存的最低地址处，而最高有效字节（MSB）存储在内存的最高地址处。\n   - 小端字节序的表示方式与计算机内部的数据存储方式相符，因此在许多计算机架构中使用较为广泛。\n\n   例如，十六进制数0x12345678在小端字节序中存储为：\n\n   ```C\n   0x78 0x56 0x34 0x12\n   ```\n\n字节序的选择在不同计算机架构和操作系统中可以有所不同。例如，x86 和 x86-64 架构通常使用小端字节序，而某些大型服务器架构（如SPARC）使用大端字节序。这种差异可能会在数据交换和网络通信中引起问题，因此在跨平台应用程序中，需要特别注意字节序的处理，以确保数据正确解释和传递。通常使用一种标准的字节序协议（如网络字节序）来协调不同架构之间的数据交换。\n","source":"_posts/post-4.md","raw":"---\ntitle: C 语言数据存储基础\ndate: 2023-09-25 21:55:00\nindex_img: /img/post-4.png\ntags: 数据存储png\n---\n\n> 本文介绍 C 语言数据存储的详细内容。\n\n## 1. 数据类型\n\n### 1.1 类型的基本归类\n\nC语言中有多种基本数据类型，包括整数、浮点数、字符等。这些数据类型在内存中占用的空间大小不同，例如，int通常占用4个字节，float占用4个字节，char占用1个字节。数据类型决定了数据在内存中的存储方式和表示形式，可以分为以下的五大类型：\n\n### 1.1.1 整型\n\n```c\nchar\n\tunsigned char\n\tsigned char\nshort\n\tunsigned short [int]\n\tsigned short [int]\nint \n\tunsigned int\n\tsigned int\nlong\n\tunsigned long\n\tsigned long [int]\n```\n\n### 1.1.2 浮点型\n\n```c\nfloat\ndouble\n```\n\n### 1.1.3 构造类型\n\n```c\narray // 数组类型\nstruct // 结构体类型 \nenum // 枚举类型 \nunion // 联合类型\n```\n\n### 1.1.4 指针类型\n\n```\nint *ptr\nchar *ptr\nfloat *ptr\nvoid *ptr\n```\n\n### 1.1.5 空类型\n\n```\nvoid // 函数参数、返回类型、指针\n```\n\n## 2. 整形在内存中的存储\n\nC 变量的创建是根据数据类型在内存中开辟空间。\n\n### 2.1 原码、反码、补码\n\n数据在内存中以 2 进制的形式存储，以整数举例，其 2 进制存储有三种表示形式。\n\n正整数：原码、反码、补码相同。\n\n负整数：原码、反码、补码要进行计算。\n\n举例代码：\n\n```\nint a = -10;\n// 10000000 00000000 00000000 00001010 - 原码（原始 2 进制表示形式）\n// 11111111 11111111 11111111 11110101 - 反码（符号位不变，其它位按位取反）\n// 11111111 11111111 11111111 11110110 - 补码（反码 + 1）\n```\n\nVS Code 调试取 `&a` 的地址后可以观察发现 16 进制的内存地址所存储的数据为 `F6 FF FF FF`，这恰好是 2 进制补码的 16 进制数，同时表明了整数在内存中存储的是补码。\n\n{% asset_img 1.png %}\n\n<br/>\n\n<br/>\n\n> 为什么数据在内存中存放的是补码：因为在计算机组成原理中，补码可以将符号位和数值域统一处理，加法和减法也可以统一处理（CPU只有加法器），此外补码和原码相互转换，运算过程是相同的，无需额外的逻辑硬件电路。\n\n举例代码：\n\n```c\nint main()\n{\n\t// 1 - 1;\n\t// 1 + (-1);\n\t// 00000000 00000000 00000000 00000001 - 1的原码\n\t// 10000000 00000000 00000000 00000001 - -1的原码\n    // 如果计算机采用原码进行逻辑加减（1+（-1）），得到结果数值如下\n    // 10000000 00000000 00000000 00000010 - 是-2？可以看到数值是错误的。\n\t// 如果采用补码运算，数值才是正确的，这是计算机组成底层原理的逻辑。\n}\n```\n\n### 2.2 大端字节序和小端字节序\n\n字节序（Byte Order）是指多字节数据在计算机内存中存储时的顺序。字节序分为两种主要类型：大端字节序（Big-Endian）和小端字节序（Little-Endian）。\n\n1. **大端字节序（Big-Endian）**：\n\n   - 在大端字节序中，多字节数据的最高有效字节（Most Significant Byte，MSB）存储在内存的最低地址处，而最低有效字节（Least Significant Byte，LSB）存储在内存的最高地址处。\n   - 大端字节序的表示方式类似于阅读书写的方式，先读取最高位的字节，然后是次高位，以此类推。\n\n   例如，十六进制数0x12345678在大端字节序中存储为：\n\n   ```c\n   0x12 0x34 0x56 0x78\n   ```\n   \n2. **小端字节序（Little-Endian）**：\n\n   - 在小端字节序中，多字节数据的最低有效字节（LSB）存储在内存的最低地址处，而最高有效字节（MSB）存储在内存的最高地址处。\n   - 小端字节序的表示方式与计算机内部的数据存储方式相符，因此在许多计算机架构中使用较为广泛。\n\n   例如，十六进制数0x12345678在小端字节序中存储为：\n\n   ```C\n   0x78 0x56 0x34 0x12\n   ```\n\n字节序的选择在不同计算机架构和操作系统中可以有所不同。例如，x86 和 x86-64 架构通常使用小端字节序，而某些大型服务器架构（如SPARC）使用大端字节序。这种差异可能会在数据交换和网络通信中引起问题，因此在跨平台应用程序中，需要特别注意字节序的处理，以确保数据正确解释和传递。通常使用一种标准的字节序协议（如网络字节序）来协调不同架构之间的数据交换。\n","slug":"post-4","published":1,"updated":"2024-02-05T08:53:31.170Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsa2mbri0008kkg23pys42q0","content":"<blockquote>\n<p>本文介绍 C 语言数据存储的详细内容。</p>\n</blockquote>\n<h2 id=\"1-数据类型\"><a href=\"#1-数据类型\" class=\"headerlink\" title=\"1. 数据类型\"></a>1. 数据类型</h2><h3 id=\"1-1-类型的基本归类\"><a href=\"#1-1-类型的基本归类\" class=\"headerlink\" title=\"1.1 类型的基本归类\"></a>1.1 类型的基本归类</h3><p>C语言中有多种基本数据类型，包括整数、浮点数、字符等。这些数据类型在内存中占用的空间大小不同，例如，int通常占用4个字节，float占用4个字节，char占用1个字节。数据类型决定了数据在内存中的存储方式和表示形式，可以分为以下的五大类型：</p>\n<h3 id=\"1-1-1-整型\"><a href=\"#1-1-1-整型\" class=\"headerlink\" title=\"1.1.1 整型\"></a>1.1.1 整型</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">char</span><br>\t<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">char</span><br>\t<span class=\"hljs-type\">signed</span> <span class=\"hljs-type\">char</span><br><span class=\"hljs-type\">short</span><br>\t<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">short</span> [<span class=\"hljs-type\">int</span>]<br>\t<span class=\"hljs-type\">signed</span> <span class=\"hljs-type\">short</span> [<span class=\"hljs-type\">int</span>]<br><span class=\"hljs-type\">int</span> <br>\t<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span><br>\t<span class=\"hljs-type\">signed</span> <span class=\"hljs-type\">int</span><br><span class=\"hljs-type\">long</span><br>\t<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">long</span><br>\t<span class=\"hljs-type\">signed</span> <span class=\"hljs-type\">long</span> [<span class=\"hljs-type\">int</span>]<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"1-1-2-浮点型\"><a href=\"#1-1-2-浮点型\" class=\"headerlink\" title=\"1.1.2 浮点型\"></a>1.1.2 浮点型</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">float</span><br><span class=\"hljs-type\">double</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"1-1-3-构造类型\"><a href=\"#1-1-3-构造类型\" class=\"headerlink\" title=\"1.1.3 构造类型\"></a>1.1.3 构造类型</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-built_in\">array</span> <span class=\"hljs-comment\">// 数组类型</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> // 结构体类型 </span><br><span class=\"hljs-class\"><span class=\"hljs-title\">enum</span> // 枚举类型 </span><br><span class=\"hljs-class\"><span class=\"hljs-title\">union</span> // 联合类型</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"1-1-4-指针类型\"><a href=\"#1-1-4-指针类型\" class=\"headerlink\" title=\"1.1.4 指针类型\"></a>1.1.4 指针类型</h3><figure class=\"highlight nim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nim\"><span class=\"hljs-type\">int</span> *<span class=\"hljs-keyword\">ptr</span><br><span class=\"hljs-type\">char</span> *<span class=\"hljs-keyword\">ptr</span><br><span class=\"hljs-type\">float</span> *<span class=\"hljs-keyword\">ptr</span><br><span class=\"hljs-type\">void</span> *<span class=\"hljs-keyword\">ptr</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"1-1-5-空类型\"><a href=\"#1-1-5-空类型\" class=\"headerlink\" title=\"1.1.5 空类型\"></a>1.1.5 空类型</h3><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs actionscript\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-comment\">// 函数参数、返回类型、指针</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-整形在内存中的存储\"><a href=\"#2-整形在内存中的存储\" class=\"headerlink\" title=\"2. 整形在内存中的存储\"></a>2. 整形在内存中的存储</h2><p>C 变量的创建是根据数据类型在内存中开辟空间。</p>\n<h3 id=\"2-1-原码、反码、补码\"><a href=\"#2-1-原码、反码、补码\" class=\"headerlink\" title=\"2.1 原码、反码、补码\"></a>2.1 原码、反码、补码</h3><p>数据在内存中以 2 进制的形式存储，以整数举例，其 2 进制存储有三种表示形式。</p>\n<p>正整数：原码、反码、补码相同。</p>\n<p>负整数：原码、反码、补码要进行计算。</p>\n<p>举例代码：</p>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dns\">int a = -<span class=\"hljs-number\">10</span><span class=\"hljs-comment\">;</span><br>// <span class=\"hljs-number\">10000000</span> <span class=\"hljs-number\">00000000</span> <span class=\"hljs-number\">00000000</span> <span class=\"hljs-number\">00001010</span> - 原码（原始 <span class=\"hljs-number\">2</span> 进制表示形式）<br>// <span class=\"hljs-number\">11111111</span> <span class=\"hljs-number\">11111111</span> <span class=\"hljs-number\">11111111</span> <span class=\"hljs-number\">11110101</span> - 反码（符号位不变，其它位按位取反）<br>// <span class=\"hljs-number\">11111111</span> <span class=\"hljs-number\">11111111</span> <span class=\"hljs-number\">11111111</span> <span class=\"hljs-number\">11110110</span> - 补码（反码 + <span class=\"hljs-number\">1</span>）<br></code></pre></td></tr></table></figure>\n\n<p>VS Code 调试取 <code>&amp;a</code> 的地址后可以观察发现 16 进制的内存地址所存储的数据为 <code>F6 FF FF FF</code>，这恰好是 2 进制补码的 16 进制数，同时表明了整数在内存中存储的是补码。</p>\n<img src=\"/2023/09/25/post-4/1.png\" class=\"\">\n\n<br/>\n\n<br/>\n\n<blockquote>\n<p>为什么数据在内存中存放的是补码：因为在计算机组成原理中，补码可以将符号位和数值域统一处理，加法和减法也可以统一处理（CPU只有加法器），此外补码和原码相互转换，运算过程是相同的，无需额外的逻辑硬件电路。</p>\n</blockquote>\n<p>举例代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span><br>&#123;<br>\t<span class=\"hljs-comment\">// 1 - 1;</span><br>\t<span class=\"hljs-comment\">// 1 + (-1);</span><br>\t<span class=\"hljs-comment\">// 00000000 00000000 00000000 00000001 - 1的原码</span><br>\t<span class=\"hljs-comment\">// 10000000 00000000 00000000 00000001 - -1的原码</span><br>    <span class=\"hljs-comment\">// 如果计算机采用原码进行逻辑加减（1+（-1）），得到结果数值如下</span><br>    <span class=\"hljs-comment\">// 10000000 00000000 00000000 00000010 - 是-2？可以看到数值是错误的。</span><br>\t<span class=\"hljs-comment\">// 如果采用补码运算，数值才是正确的，这是计算机组成底层原理的逻辑。</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-大端字节序和小端字节序\"><a href=\"#2-2-大端字节序和小端字节序\" class=\"headerlink\" title=\"2.2 大端字节序和小端字节序\"></a>2.2 大端字节序和小端字节序</h3><p>字节序（Byte Order）是指多字节数据在计算机内存中存储时的顺序。字节序分为两种主要类型：大端字节序（Big-Endian）和小端字节序（Little-Endian）。</p>\n<ol>\n<li><p><strong>大端字节序（Big-Endian）</strong>：</p>\n<ul>\n<li>在大端字节序中，多字节数据的最高有效字节（Most Significant Byte，MSB）存储在内存的最低地址处，而最低有效字节（Least Significant Byte，LSB）存储在内存的最高地址处。</li>\n<li>大端字节序的表示方式类似于阅读书写的方式，先读取最高位的字节，然后是次高位，以此类推。</li>\n</ul>\n<p>例如，十六进制数0x12345678在大端字节序中存储为：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-number\">0x12</span> <span class=\"hljs-number\">0x34</span> <span class=\"hljs-number\">0x56</span> <span class=\"hljs-number\">0x78</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>小端字节序（Little-Endian）</strong>：</p>\n<ul>\n<li>在小端字节序中，多字节数据的最低有效字节（LSB）存储在内存的最低地址处，而最高有效字节（MSB）存储在内存的最高地址处。</li>\n<li>小端字节序的表示方式与计算机内部的数据存储方式相符，因此在许多计算机架构中使用较为广泛。</li>\n</ul>\n<p>例如，十六进制数0x12345678在小端字节序中存储为：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-number\">0x78</span> <span class=\"hljs-number\">0x56</span> <span class=\"hljs-number\">0x34</span> <span class=\"hljs-number\">0x12</span><br></code></pre></td></tr></table></figure></li>\n</ol>\n<p>字节序的选择在不同计算机架构和操作系统中可以有所不同。例如，x86 和 x86-64 架构通常使用小端字节序，而某些大型服务器架构（如SPARC）使用大端字节序。这种差异可能会在数据交换和网络通信中引起问题，因此在跨平台应用程序中，需要特别注意字节序的处理，以确保数据正确解释和传递。通常使用一种标准的字节序协议（如网络字节序）来协调不同架构之间的数据交换。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>本文介绍 C 语言数据存储的详细内容。</p>\n</blockquote>\n<h2 id=\"1-数据类型\"><a href=\"#1-数据类型\" class=\"headerlink\" title=\"1. 数据类型\"></a>1. 数据类型</h2><h3 id=\"1-1-类型的基本归类\"><a href=\"#1-1-类型的基本归类\" class=\"headerlink\" title=\"1.1 类型的基本归类\"></a>1.1 类型的基本归类</h3><p>C语言中有多种基本数据类型，包括整数、浮点数、字符等。这些数据类型在内存中占用的空间大小不同，例如，int通常占用4个字节，float占用4个字节，char占用1个字节。数据类型决定了数据在内存中的存储方式和表示形式，可以分为以下的五大类型：</p>\n<h3 id=\"1-1-1-整型\"><a href=\"#1-1-1-整型\" class=\"headerlink\" title=\"1.1.1 整型\"></a>1.1.1 整型</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">char</span><br>\t<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">char</span><br>\t<span class=\"hljs-type\">signed</span> <span class=\"hljs-type\">char</span><br><span class=\"hljs-type\">short</span><br>\t<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">short</span> [<span class=\"hljs-type\">int</span>]<br>\t<span class=\"hljs-type\">signed</span> <span class=\"hljs-type\">short</span> [<span class=\"hljs-type\">int</span>]<br><span class=\"hljs-type\">int</span> <br>\t<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span><br>\t<span class=\"hljs-type\">signed</span> <span class=\"hljs-type\">int</span><br><span class=\"hljs-type\">long</span><br>\t<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">long</span><br>\t<span class=\"hljs-type\">signed</span> <span class=\"hljs-type\">long</span> [<span class=\"hljs-type\">int</span>]<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"1-1-2-浮点型\"><a href=\"#1-1-2-浮点型\" class=\"headerlink\" title=\"1.1.2 浮点型\"></a>1.1.2 浮点型</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">float</span><br><span class=\"hljs-type\">double</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"1-1-3-构造类型\"><a href=\"#1-1-3-构造类型\" class=\"headerlink\" title=\"1.1.3 构造类型\"></a>1.1.3 构造类型</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-built_in\">array</span> <span class=\"hljs-comment\">// 数组类型</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> // 结构体类型 </span><br><span class=\"hljs-class\"><span class=\"hljs-title\">enum</span> // 枚举类型 </span><br><span class=\"hljs-class\"><span class=\"hljs-title\">union</span> // 联合类型</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"1-1-4-指针类型\"><a href=\"#1-1-4-指针类型\" class=\"headerlink\" title=\"1.1.4 指针类型\"></a>1.1.4 指针类型</h3><figure class=\"highlight nim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nim\"><span class=\"hljs-type\">int</span> *<span class=\"hljs-keyword\">ptr</span><br><span class=\"hljs-type\">char</span> *<span class=\"hljs-keyword\">ptr</span><br><span class=\"hljs-type\">float</span> *<span class=\"hljs-keyword\">ptr</span><br><span class=\"hljs-type\">void</span> *<span class=\"hljs-keyword\">ptr</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"1-1-5-空类型\"><a href=\"#1-1-5-空类型\" class=\"headerlink\" title=\"1.1.5 空类型\"></a>1.1.5 空类型</h3><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs actionscript\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-comment\">// 函数参数、返回类型、指针</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-整形在内存中的存储\"><a href=\"#2-整形在内存中的存储\" class=\"headerlink\" title=\"2. 整形在内存中的存储\"></a>2. 整形在内存中的存储</h2><p>C 变量的创建是根据数据类型在内存中开辟空间。</p>\n<h3 id=\"2-1-原码、反码、补码\"><a href=\"#2-1-原码、反码、补码\" class=\"headerlink\" title=\"2.1 原码、反码、补码\"></a>2.1 原码、反码、补码</h3><p>数据在内存中以 2 进制的形式存储，以整数举例，其 2 进制存储有三种表示形式。</p>\n<p>正整数：原码、反码、补码相同。</p>\n<p>负整数：原码、反码、补码要进行计算。</p>\n<p>举例代码：</p>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dns\">int a = -<span class=\"hljs-number\">10</span><span class=\"hljs-comment\">;</span><br>// <span class=\"hljs-number\">10000000</span> <span class=\"hljs-number\">00000000</span> <span class=\"hljs-number\">00000000</span> <span class=\"hljs-number\">00001010</span> - 原码（原始 <span class=\"hljs-number\">2</span> 进制表示形式）<br>// <span class=\"hljs-number\">11111111</span> <span class=\"hljs-number\">11111111</span> <span class=\"hljs-number\">11111111</span> <span class=\"hljs-number\">11110101</span> - 反码（符号位不变，其它位按位取反）<br>// <span class=\"hljs-number\">11111111</span> <span class=\"hljs-number\">11111111</span> <span class=\"hljs-number\">11111111</span> <span class=\"hljs-number\">11110110</span> - 补码（反码 + <span class=\"hljs-number\">1</span>）<br></code></pre></td></tr></table></figure>\n\n<p>VS Code 调试取 <code>&amp;a</code> 的地址后可以观察发现 16 进制的内存地址所存储的数据为 <code>F6 FF FF FF</code>，这恰好是 2 进制补码的 16 进制数，同时表明了整数在内存中存储的是补码。</p>\n<img src=\"/2023/09/25/post-4/1.png\" class=\"\">\n\n<br/>\n\n<br/>\n\n<blockquote>\n<p>为什么数据在内存中存放的是补码：因为在计算机组成原理中，补码可以将符号位和数值域统一处理，加法和减法也可以统一处理（CPU只有加法器），此外补码和原码相互转换，运算过程是相同的，无需额外的逻辑硬件电路。</p>\n</blockquote>\n<p>举例代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span><br>&#123;<br>\t<span class=\"hljs-comment\">// 1 - 1;</span><br>\t<span class=\"hljs-comment\">// 1 + (-1);</span><br>\t<span class=\"hljs-comment\">// 00000000 00000000 00000000 00000001 - 1的原码</span><br>\t<span class=\"hljs-comment\">// 10000000 00000000 00000000 00000001 - -1的原码</span><br>    <span class=\"hljs-comment\">// 如果计算机采用原码进行逻辑加减（1+（-1）），得到结果数值如下</span><br>    <span class=\"hljs-comment\">// 10000000 00000000 00000000 00000010 - 是-2？可以看到数值是错误的。</span><br>\t<span class=\"hljs-comment\">// 如果采用补码运算，数值才是正确的，这是计算机组成底层原理的逻辑。</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-大端字节序和小端字节序\"><a href=\"#2-2-大端字节序和小端字节序\" class=\"headerlink\" title=\"2.2 大端字节序和小端字节序\"></a>2.2 大端字节序和小端字节序</h3><p>字节序（Byte Order）是指多字节数据在计算机内存中存储时的顺序。字节序分为两种主要类型：大端字节序（Big-Endian）和小端字节序（Little-Endian）。</p>\n<ol>\n<li><p><strong>大端字节序（Big-Endian）</strong>：</p>\n<ul>\n<li>在大端字节序中，多字节数据的最高有效字节（Most Significant Byte，MSB）存储在内存的最低地址处，而最低有效字节（Least Significant Byte，LSB）存储在内存的最高地址处。</li>\n<li>大端字节序的表示方式类似于阅读书写的方式，先读取最高位的字节，然后是次高位，以此类推。</li>\n</ul>\n<p>例如，十六进制数0x12345678在大端字节序中存储为：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-number\">0x12</span> <span class=\"hljs-number\">0x34</span> <span class=\"hljs-number\">0x56</span> <span class=\"hljs-number\">0x78</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>小端字节序（Little-Endian）</strong>：</p>\n<ul>\n<li>在小端字节序中，多字节数据的最低有效字节（LSB）存储在内存的最低地址处，而最高有效字节（MSB）存储在内存的最高地址处。</li>\n<li>小端字节序的表示方式与计算机内部的数据存储方式相符，因此在许多计算机架构中使用较为广泛。</li>\n</ul>\n<p>例如，十六进制数0x12345678在小端字节序中存储为：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-number\">0x78</span> <span class=\"hljs-number\">0x56</span> <span class=\"hljs-number\">0x34</span> <span class=\"hljs-number\">0x12</span><br></code></pre></td></tr></table></figure></li>\n</ol>\n<p>字节序的选择在不同计算机架构和操作系统中可以有所不同。例如，x86 和 x86-64 架构通常使用小端字节序，而某些大型服务器架构（如SPARC）使用大端字节序。这种差异可能会在数据交换和网络通信中引起问题，因此在跨平台应用程序中，需要特别注意字节序的处理，以确保数据正确解释和传递。通常使用一种标准的字节序协议（如网络字节序）来协调不同架构之间的数据交换。</p>\n"},{"title":"嵌入式技能学习进度与教程清单 [2023/11/26 更新]","date":"2023-11-26T14:57:42.000Z","index_img":"/img/post-5.jpg","_content":"\n> 本文汇总学习进度和一些教程。\n\n## 编程语言 - Programming Language\n\n**C语言**\n\n书籍：C Primer Plus 第 6 版【进度 - 指针进阶 60%】\n\n视频：鹏哥 2021 版 - BV1U44y1y7xN 【进度 - 第 10 章 指针与数组】\n\n## 通用基础 - Basic\n\n**计算机原理**\n\n书籍：计算机是如何跑起来的【进度 - **已完成**】\n\n书籍：程序是如何跑起来的【进度 - 刚开始】\n\n## 单片机 - MCU\n\n**51 单片机**\n\n视频：江科大 - BV1Mb411e7re 【进度 - 串口通信】\n\n## 操作系统 - OS\n\n**Linux**\n\n视频：韦东山 - BV1w4411B7a4 【Linux 基础入门】\n\n## 其它 - Other\n\n**Web 前端**\n\n**HTML & CSS**\n\n书籍：Web前端开发技术（第3版）*储久良*【进度 - HTML5 & CSS 部分已完成】\n\n视频：黑马 【进度 - 早期已完成（掌握）】\n","source":"_posts/post-5.md","raw":"---\ntitle: 嵌入式技能学习进度与教程清单 [2023/11/26 更新]\ndate: 2023-11-26 22:57:42\nindex_img: /img/post-5.jpg\ntags: 学习\n---\n\n> 本文汇总学习进度和一些教程。\n\n## 编程语言 - Programming Language\n\n**C语言**\n\n书籍：C Primer Plus 第 6 版【进度 - 指针进阶 60%】\n\n视频：鹏哥 2021 版 - BV1U44y1y7xN 【进度 - 第 10 章 指针与数组】\n\n## 通用基础 - Basic\n\n**计算机原理**\n\n书籍：计算机是如何跑起来的【进度 - **已完成**】\n\n书籍：程序是如何跑起来的【进度 - 刚开始】\n\n## 单片机 - MCU\n\n**51 单片机**\n\n视频：江科大 - BV1Mb411e7re 【进度 - 串口通信】\n\n## 操作系统 - OS\n\n**Linux**\n\n视频：韦东山 - BV1w4411B7a4 【Linux 基础入门】\n\n## 其它 - Other\n\n**Web 前端**\n\n**HTML & CSS**\n\n书籍：Web前端开发技术（第3版）*储久良*【进度 - HTML5 & CSS 部分已完成】\n\n视频：黑马 【进度 - 早期已完成（掌握）】\n","slug":"post-5","published":1,"updated":"2024-02-05T08:53:31.472Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsa2mbri0009kkg2h6z230wh","content":"<blockquote>\n<p>本文汇总学习进度和一些教程。</p>\n</blockquote>\n<h2 id=\"编程语言-Programming-Language\"><a href=\"#编程语言-Programming-Language\" class=\"headerlink\" title=\"编程语言 - Programming Language\"></a>编程语言 - Programming Language</h2><p><strong>C语言</strong></p>\n<p>书籍：C Primer Plus 第 6 版【进度 - 指针进阶 60%】</p>\n<p>视频：鹏哥 2021 版 - BV1U44y1y7xN 【进度 - 第 10 章 指针与数组】</p>\n<h2 id=\"通用基础-Basic\"><a href=\"#通用基础-Basic\" class=\"headerlink\" title=\"通用基础 - Basic\"></a>通用基础 - Basic</h2><p><strong>计算机原理</strong></p>\n<p>书籍：计算机是如何跑起来的【进度 - <strong>已完成</strong>】</p>\n<p>书籍：程序是如何跑起来的【进度 - 刚开始】</p>\n<h2 id=\"单片机-MCU\"><a href=\"#单片机-MCU\" class=\"headerlink\" title=\"单片机 - MCU\"></a>单片机 - MCU</h2><p><strong>51 单片机</strong></p>\n<p>视频：江科大 - BV1Mb411e7re 【进度 - 串口通信】</p>\n<h2 id=\"操作系统-OS\"><a href=\"#操作系统-OS\" class=\"headerlink\" title=\"操作系统 - OS\"></a>操作系统 - OS</h2><p><strong>Linux</strong></p>\n<p>视频：韦东山 - BV1w4411B7a4 【Linux 基础入门】</p>\n<h2 id=\"其它-Other\"><a href=\"#其它-Other\" class=\"headerlink\" title=\"其它 - Other\"></a>其它 - Other</h2><p><strong>Web 前端</strong></p>\n<p><strong>HTML &amp; CSS</strong></p>\n<p>书籍：Web前端开发技术（第3版）<em>储久良</em>【进度 - HTML5 &amp; CSS 部分已完成】</p>\n<p>视频：黑马 【进度 - 早期已完成（掌握）】</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>本文汇总学习进度和一些教程。</p>\n</blockquote>\n<h2 id=\"编程语言-Programming-Language\"><a href=\"#编程语言-Programming-Language\" class=\"headerlink\" title=\"编程语言 - Programming Language\"></a>编程语言 - Programming Language</h2><p><strong>C语言</strong></p>\n<p>书籍：C Primer Plus 第 6 版【进度 - 指针进阶 60%】</p>\n<p>视频：鹏哥 2021 版 - BV1U44y1y7xN 【进度 - 第 10 章 指针与数组】</p>\n<h2 id=\"通用基础-Basic\"><a href=\"#通用基础-Basic\" class=\"headerlink\" title=\"通用基础 - Basic\"></a>通用基础 - Basic</h2><p><strong>计算机原理</strong></p>\n<p>书籍：计算机是如何跑起来的【进度 - <strong>已完成</strong>】</p>\n<p>书籍：程序是如何跑起来的【进度 - 刚开始】</p>\n<h2 id=\"单片机-MCU\"><a href=\"#单片机-MCU\" class=\"headerlink\" title=\"单片机 - MCU\"></a>单片机 - MCU</h2><p><strong>51 单片机</strong></p>\n<p>视频：江科大 - BV1Mb411e7re 【进度 - 串口通信】</p>\n<h2 id=\"操作系统-OS\"><a href=\"#操作系统-OS\" class=\"headerlink\" title=\"操作系统 - OS\"></a>操作系统 - OS</h2><p><strong>Linux</strong></p>\n<p>视频：韦东山 - BV1w4411B7a4 【Linux 基础入门】</p>\n<h2 id=\"其它-Other\"><a href=\"#其它-Other\" class=\"headerlink\" title=\"其它 - Other\"></a>其它 - Other</h2><p><strong>Web 前端</strong></p>\n<p><strong>HTML &amp; CSS</strong></p>\n<p>书籍：Web前端开发技术（第3版）<em>储久良</em>【进度 - HTML5 &amp; CSS 部分已完成】</p>\n<p>视频：黑马 【进度 - 早期已完成（掌握）】</p>\n"},{"title":"嵌入式 Linux 开发环境初步搭建","date":"2023-12-13T15:13:01.000Z","index_img":"/img/post-6.png","_content":"\n> 对于嵌入式 Linux 开发，第一步的难题就是搭建起一个方便易用的开发环境，说着是易用，配置的过程也是较为繁琐，Linux 相比 Windows 之下就是一匹需要驯服的野马。所以本文汇总我使用 iMX6ULL 开发板搭建开发环境的方法和步骤。\n\n## VMware Ubuntu 虚拟机系统安装与配置\n\n1. 安装 VMware Workstation 和 下载准备 Ubuntu 系统镜像（这里采用 22.04 LTS 发行版）。\n2. 更换 apt sources.list 软件源（阿里源、清华源等）以改善软件包管理网络访问质量和速度。\n\n## 软件准备\n\n除了VMware 和 Ubuntu.\n\n在Windows下 我们还需要\n\n\n\n## 开发环境概要\n\n1. Windows 平台：使用 Visual Studio Code 编辑源代码；利用 SMB 便捷管理与 Linux 文件和其传输。\n2. Ubuntu 平台：使用 VMware 虚拟机系统模拟 Linux 开发环境，最主要是在这个交叉编译环境中生成程序文件。\n3. iMX6ULL 平台：当然，操作系统也是 Linux，但通过 Windows 使用 MobaXterm 串口通信访问开发板终端操作开发板。\n\n## 开发局域网环境配置\n\n上面介绍的三个平台，那么如何通过 MobaXterm 整合连接这三个平台？\n我们采取的方法是配置这三个平台的网络设备在同一个局域网下。\n\n1. 我住所大致的网络拓扑如图所示。（主路由的LAN口连接到二级路由器LAN口并开启中转桥接模式，充当交换机，二级路由在书桌旁边，这样也方便有线连接开发板。）\n\n   {%asset_img 1.png %}\n\n   <br/>\n\n   <br/>\n\n2. Windows：直接连接二级路由器，一般我们就是这样访问互联网，这个不作太多说明。\n\n3. Ubuntu：注意在 Ubuntu 虚拟机系统中，需要配置两种网络设备，第一种是虚拟机系统默认的 NAT 连接方式，Ubuntu 通过 Windows 访问互联网，这个很好理解。第二种就是单独为 Ubuntu 添加虚拟网卡设备，具体配置方式如下。配置完成后，相当于 Ubuntu 的虚拟网卡也成为了局域网中的网络设备。\n\n4. iMX6Ull: 开发板也是直接使用网线连接 ETH 网口（以太网）到二级路由器，与台式主机一样。\n\n最后接线完成后，这三个平台的设备就处于同一局域网中了。\n另外建议在主路由器后台管理中，绑定三个设备对应的 MAC 地址，避免 DHCP 频繁变更分配到的 IP 地址。\n\n在 Windows 和 Ubuntu 终端中分别使用 ipconfig 和 ifconfig 命令可以检查对应 IP 地址。\n假设三个设备分配的 IP 如下：\nWindows: 192.168.0.1\nUbuntu: 192.168.0.2\niMX6ULL: 192.168.0.3\n\n接下使用 ping 命令检查相互之间是否能正常连接即可。\n\n## 交叉编译工具链\n\n## Ubuntu 配置 Samba + Windows 映射路径访问 Ubuntu 文件\n\n## Ubuntu 配置 SSH + MobaXterm SSH 终端访问\n\n## 开发板连接 Windows + MobaXterm Serial 终端访问\n\n## Ubuntu 配置 NFS 挂载目录\n","source":"_posts/post-6.md","raw":"---\ntitle: 嵌入式 Linux 开发环境初步搭建\ndate: 2023-12-13 23:13:01\nindex_img: /img/post-6.png\ntags: 环境搭建\n---\n\n> 对于嵌入式 Linux 开发，第一步的难题就是搭建起一个方便易用的开发环境，说着是易用，配置的过程也是较为繁琐，Linux 相比 Windows 之下就是一匹需要驯服的野马。所以本文汇总我使用 iMX6ULL 开发板搭建开发环境的方法和步骤。\n\n## VMware Ubuntu 虚拟机系统安装与配置\n\n1. 安装 VMware Workstation 和 下载准备 Ubuntu 系统镜像（这里采用 22.04 LTS 发行版）。\n2. 更换 apt sources.list 软件源（阿里源、清华源等）以改善软件包管理网络访问质量和速度。\n\n## 软件准备\n\n除了VMware 和 Ubuntu.\n\n在Windows下 我们还需要\n\n\n\n## 开发环境概要\n\n1. Windows 平台：使用 Visual Studio Code 编辑源代码；利用 SMB 便捷管理与 Linux 文件和其传输。\n2. Ubuntu 平台：使用 VMware 虚拟机系统模拟 Linux 开发环境，最主要是在这个交叉编译环境中生成程序文件。\n3. iMX6ULL 平台：当然，操作系统也是 Linux，但通过 Windows 使用 MobaXterm 串口通信访问开发板终端操作开发板。\n\n## 开发局域网环境配置\n\n上面介绍的三个平台，那么如何通过 MobaXterm 整合连接这三个平台？\n我们采取的方法是配置这三个平台的网络设备在同一个局域网下。\n\n1. 我住所大致的网络拓扑如图所示。（主路由的LAN口连接到二级路由器LAN口并开启中转桥接模式，充当交换机，二级路由在书桌旁边，这样也方便有线连接开发板。）\n\n   {%asset_img 1.png %}\n\n   <br/>\n\n   <br/>\n\n2. Windows：直接连接二级路由器，一般我们就是这样访问互联网，这个不作太多说明。\n\n3. Ubuntu：注意在 Ubuntu 虚拟机系统中，需要配置两种网络设备，第一种是虚拟机系统默认的 NAT 连接方式，Ubuntu 通过 Windows 访问互联网，这个很好理解。第二种就是单独为 Ubuntu 添加虚拟网卡设备，具体配置方式如下。配置完成后，相当于 Ubuntu 的虚拟网卡也成为了局域网中的网络设备。\n\n4. iMX6Ull: 开发板也是直接使用网线连接 ETH 网口（以太网）到二级路由器，与台式主机一样。\n\n最后接线完成后，这三个平台的设备就处于同一局域网中了。\n另外建议在主路由器后台管理中，绑定三个设备对应的 MAC 地址，避免 DHCP 频繁变更分配到的 IP 地址。\n\n在 Windows 和 Ubuntu 终端中分别使用 ipconfig 和 ifconfig 命令可以检查对应 IP 地址。\n假设三个设备分配的 IP 如下：\nWindows: 192.168.0.1\nUbuntu: 192.168.0.2\niMX6ULL: 192.168.0.3\n\n接下使用 ping 命令检查相互之间是否能正常连接即可。\n\n## 交叉编译工具链\n\n## Ubuntu 配置 Samba + Windows 映射路径访问 Ubuntu 文件\n\n## Ubuntu 配置 SSH + MobaXterm SSH 终端访问\n\n## 开发板连接 Windows + MobaXterm Serial 终端访问\n\n## Ubuntu 配置 NFS 挂载目录\n","slug":"post-6","published":1,"updated":"2024-02-05T08:53:31.480Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsa2mbrk000bkkg2dx5ccyb9","content":"<blockquote>\n<p>对于嵌入式 Linux 开发，第一步的难题就是搭建起一个方便易用的开发环境，说着是易用，配置的过程也是较为繁琐，Linux 相比 Windows 之下就是一匹需要驯服的野马。所以本文汇总我使用 iMX6ULL 开发板搭建开发环境的方法和步骤。</p>\n</blockquote>\n<h2 id=\"VMware-Ubuntu-虚拟机系统安装与配置\"><a href=\"#VMware-Ubuntu-虚拟机系统安装与配置\" class=\"headerlink\" title=\"VMware Ubuntu 虚拟机系统安装与配置\"></a>VMware Ubuntu 虚拟机系统安装与配置</h2><ol>\n<li>安装 VMware Workstation 和 下载准备 Ubuntu 系统镜像（这里采用 22.04 LTS 发行版）。</li>\n<li>更换 apt sources.list 软件源（阿里源、清华源等）以改善软件包管理网络访问质量和速度。</li>\n</ol>\n<h2 id=\"软件准备\"><a href=\"#软件准备\" class=\"headerlink\" title=\"软件准备\"></a>软件准备</h2><p>除了VMware 和 Ubuntu.</p>\n<p>在Windows下 我们还需要</p>\n<h2 id=\"开发环境概要\"><a href=\"#开发环境概要\" class=\"headerlink\" title=\"开发环境概要\"></a>开发环境概要</h2><ol>\n<li>Windows 平台：使用 Visual Studio Code 编辑源代码；利用 SMB 便捷管理与 Linux 文件和其传输。</li>\n<li>Ubuntu 平台：使用 VMware 虚拟机系统模拟 Linux 开发环境，最主要是在这个交叉编译环境中生成程序文件。</li>\n<li>iMX6ULL 平台：当然，操作系统也是 Linux，但通过 Windows 使用 MobaXterm 串口通信访问开发板终端操作开发板。</li>\n</ol>\n<h2 id=\"开发局域网环境配置\"><a href=\"#开发局域网环境配置\" class=\"headerlink\" title=\"开发局域网环境配置\"></a>开发局域网环境配置</h2><p>上面介绍的三个平台，那么如何通过 MobaXterm 整合连接这三个平台？<br>我们采取的方法是配置这三个平台的网络设备在同一个局域网下。</p>\n<ol>\n<li><p>我住所大致的网络拓扑如图所示。（主路由的LAN口连接到二级路由器LAN口并开启中转桥接模式，充当交换机，二级路由在书桌旁边，这样也方便有线连接开发板。）</p>\n<img src=\"/2023/12/13/post-6/1.png\" class=\"\">\n\n<br/>\n\n<br/>\n</li>\n<li><p>Windows：直接连接二级路由器，一般我们就是这样访问互联网，这个不作太多说明。</p>\n</li>\n<li><p>Ubuntu：注意在 Ubuntu 虚拟机系统中，需要配置两种网络设备，第一种是虚拟机系统默认的 NAT 连接方式，Ubuntu 通过 Windows 访问互联网，这个很好理解。第二种就是单独为 Ubuntu 添加虚拟网卡设备，具体配置方式如下。配置完成后，相当于 Ubuntu 的虚拟网卡也成为了局域网中的网络设备。</p>\n</li>\n<li><p>iMX6Ull: 开发板也是直接使用网线连接 ETH 网口（以太网）到二级路由器，与台式主机一样。</p>\n</li>\n</ol>\n<p>最后接线完成后，这三个平台的设备就处于同一局域网中了。<br>另外建议在主路由器后台管理中，绑定三个设备对应的 MAC 地址，避免 DHCP 频繁变更分配到的 IP 地址。</p>\n<p>在 Windows 和 Ubuntu 终端中分别使用 ipconfig 和 ifconfig 命令可以检查对应 IP 地址。<br>假设三个设备分配的 IP 如下：<br>Windows: 192.168.0.1<br>Ubuntu: 192.168.0.2<br>iMX6ULL: 192.168.0.3</p>\n<p>接下使用 ping 命令检查相互之间是否能正常连接即可。</p>\n<h2 id=\"交叉编译工具链\"><a href=\"#交叉编译工具链\" class=\"headerlink\" title=\"交叉编译工具链\"></a>交叉编译工具链</h2><h2 id=\"Ubuntu-配置-Samba-Windows-映射路径访问-Ubuntu-文件\"><a href=\"#Ubuntu-配置-Samba-Windows-映射路径访问-Ubuntu-文件\" class=\"headerlink\" title=\"Ubuntu 配置 Samba + Windows 映射路径访问 Ubuntu 文件\"></a>Ubuntu 配置 Samba + Windows 映射路径访问 Ubuntu 文件</h2><h2 id=\"Ubuntu-配置-SSH-MobaXterm-SSH-终端访问\"><a href=\"#Ubuntu-配置-SSH-MobaXterm-SSH-终端访问\" class=\"headerlink\" title=\"Ubuntu 配置 SSH + MobaXterm SSH 终端访问\"></a>Ubuntu 配置 SSH + MobaXterm SSH 终端访问</h2><h2 id=\"开发板连接-Windows-MobaXterm-Serial-终端访问\"><a href=\"#开发板连接-Windows-MobaXterm-Serial-终端访问\" class=\"headerlink\" title=\"开发板连接 Windows + MobaXterm Serial 终端访问\"></a>开发板连接 Windows + MobaXterm Serial 终端访问</h2><h2 id=\"Ubuntu-配置-NFS-挂载目录\"><a href=\"#Ubuntu-配置-NFS-挂载目录\" class=\"headerlink\" title=\"Ubuntu 配置 NFS 挂载目录\"></a>Ubuntu 配置 NFS 挂载目录</h2>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>对于嵌入式 Linux 开发，第一步的难题就是搭建起一个方便易用的开发环境，说着是易用，配置的过程也是较为繁琐，Linux 相比 Windows 之下就是一匹需要驯服的野马。所以本文汇总我使用 iMX6ULL 开发板搭建开发环境的方法和步骤。</p>\n</blockquote>\n<h2 id=\"VMware-Ubuntu-虚拟机系统安装与配置\"><a href=\"#VMware-Ubuntu-虚拟机系统安装与配置\" class=\"headerlink\" title=\"VMware Ubuntu 虚拟机系统安装与配置\"></a>VMware Ubuntu 虚拟机系统安装与配置</h2><ol>\n<li>安装 VMware Workstation 和 下载准备 Ubuntu 系统镜像（这里采用 22.04 LTS 发行版）。</li>\n<li>更换 apt sources.list 软件源（阿里源、清华源等）以改善软件包管理网络访问质量和速度。</li>\n</ol>\n<h2 id=\"软件准备\"><a href=\"#软件准备\" class=\"headerlink\" title=\"软件准备\"></a>软件准备</h2><p>除了VMware 和 Ubuntu.</p>\n<p>在Windows下 我们还需要</p>\n<h2 id=\"开发环境概要\"><a href=\"#开发环境概要\" class=\"headerlink\" title=\"开发环境概要\"></a>开发环境概要</h2><ol>\n<li>Windows 平台：使用 Visual Studio Code 编辑源代码；利用 SMB 便捷管理与 Linux 文件和其传输。</li>\n<li>Ubuntu 平台：使用 VMware 虚拟机系统模拟 Linux 开发环境，最主要是在这个交叉编译环境中生成程序文件。</li>\n<li>iMX6ULL 平台：当然，操作系统也是 Linux，但通过 Windows 使用 MobaXterm 串口通信访问开发板终端操作开发板。</li>\n</ol>\n<h2 id=\"开发局域网环境配置\"><a href=\"#开发局域网环境配置\" class=\"headerlink\" title=\"开发局域网环境配置\"></a>开发局域网环境配置</h2><p>上面介绍的三个平台，那么如何通过 MobaXterm 整合连接这三个平台？<br>我们采取的方法是配置这三个平台的网络设备在同一个局域网下。</p>\n<ol>\n<li><p>我住所大致的网络拓扑如图所示。（主路由的LAN口连接到二级路由器LAN口并开启中转桥接模式，充当交换机，二级路由在书桌旁边，这样也方便有线连接开发板。）</p>\n<img src=\"/2023/12/13/post-6/1.png\" class=\"\">\n\n<br/>\n\n<br/>\n</li>\n<li><p>Windows：直接连接二级路由器，一般我们就是这样访问互联网，这个不作太多说明。</p>\n</li>\n<li><p>Ubuntu：注意在 Ubuntu 虚拟机系统中，需要配置两种网络设备，第一种是虚拟机系统默认的 NAT 连接方式，Ubuntu 通过 Windows 访问互联网，这个很好理解。第二种就是单独为 Ubuntu 添加虚拟网卡设备，具体配置方式如下。配置完成后，相当于 Ubuntu 的虚拟网卡也成为了局域网中的网络设备。</p>\n</li>\n<li><p>iMX6Ull: 开发板也是直接使用网线连接 ETH 网口（以太网）到二级路由器，与台式主机一样。</p>\n</li>\n</ol>\n<p>最后接线完成后，这三个平台的设备就处于同一局域网中了。<br>另外建议在主路由器后台管理中，绑定三个设备对应的 MAC 地址，避免 DHCP 频繁变更分配到的 IP 地址。</p>\n<p>在 Windows 和 Ubuntu 终端中分别使用 ipconfig 和 ifconfig 命令可以检查对应 IP 地址。<br>假设三个设备分配的 IP 如下：<br>Windows: 192.168.0.1<br>Ubuntu: 192.168.0.2<br>iMX6ULL: 192.168.0.3</p>\n<p>接下使用 ping 命令检查相互之间是否能正常连接即可。</p>\n<h2 id=\"交叉编译工具链\"><a href=\"#交叉编译工具链\" class=\"headerlink\" title=\"交叉编译工具链\"></a>交叉编译工具链</h2><h2 id=\"Ubuntu-配置-Samba-Windows-映射路径访问-Ubuntu-文件\"><a href=\"#Ubuntu-配置-Samba-Windows-映射路径访问-Ubuntu-文件\" class=\"headerlink\" title=\"Ubuntu 配置 Samba + Windows 映射路径访问 Ubuntu 文件\"></a>Ubuntu 配置 Samba + Windows 映射路径访问 Ubuntu 文件</h2><h2 id=\"Ubuntu-配置-SSH-MobaXterm-SSH-终端访问\"><a href=\"#Ubuntu-配置-SSH-MobaXterm-SSH-终端访问\" class=\"headerlink\" title=\"Ubuntu 配置 SSH + MobaXterm SSH 终端访问\"></a>Ubuntu 配置 SSH + MobaXterm SSH 终端访问</h2><h2 id=\"开发板连接-Windows-MobaXterm-Serial-终端访问\"><a href=\"#开发板连接-Windows-MobaXterm-Serial-终端访问\" class=\"headerlink\" title=\"开发板连接 Windows + MobaXterm Serial 终端访问\"></a>开发板连接 Windows + MobaXterm Serial 终端访问</h2><h2 id=\"Ubuntu-配置-NFS-挂载目录\"><a href=\"#Ubuntu-配置-NFS-挂载目录\" class=\"headerlink\" title=\"Ubuntu 配置 NFS 挂载目录\"></a>Ubuntu 配置 NFS 挂载目录</h2>"}],"PostAsset":[{"_id":"source/_posts/post-2/1.png","post":"clsa2mbrc0002kkg2cp6h6tnq","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/post-2/2.png","post":"clsa2mbrc0002kkg2cp6h6tnq","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/post-2/3.png","post":"clsa2mbrc0002kkg2cp6h6tnq","slug":"3.png","modified":1,"renderable":1},{"_id":"source/_posts/post-2/4.png","post":"clsa2mbrc0002kkg2cp6h6tnq","slug":"4.png","modified":1,"renderable":1},{"_id":"source/_posts/post-2/5.png","post":"clsa2mbrc0002kkg2cp6h6tnq","slug":"5.png","modified":1,"renderable":1},{"_id":"source/_posts/post-2/6.png","post":"clsa2mbrc0002kkg2cp6h6tnq","slug":"6.png","modified":1,"renderable":1},{"_id":"source/_posts/post-2/7.png","post":"clsa2mbrc0002kkg2cp6h6tnq","slug":"7.png","modified":1,"renderable":1},{"_id":"source/_posts/post-3/1.png","post":"clsa2mbrd0003kkg28lonf95e","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/post-3/10.png","post":"clsa2mbrd0003kkg28lonf95e","slug":"10.png","modified":1,"renderable":1},{"_id":"source/_posts/post-3/2.png","post":"clsa2mbrd0003kkg28lonf95e","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/post-3/3.png","post":"clsa2mbrd0003kkg28lonf95e","slug":"3.png","modified":1,"renderable":1},{"_id":"source/_posts/post-3/4.png","post":"clsa2mbrd0003kkg28lonf95e","slug":"4.png","modified":1,"renderable":1},{"_id":"source/_posts/post-3/5.png","post":"clsa2mbrd0003kkg28lonf95e","slug":"5.png","modified":1,"renderable":1},{"_id":"source/_posts/post-3/6.png","post":"clsa2mbrd0003kkg28lonf95e","slug":"6.png","modified":1,"renderable":1},{"_id":"source/_posts/post-3/7.png","post":"clsa2mbrd0003kkg28lonf95e","slug":"7.png","modified":1,"renderable":1},{"_id":"source/_posts/post-3/8.png","post":"clsa2mbrd0003kkg28lonf95e","slug":"8.png","modified":1,"renderable":1},{"_id":"source/_posts/post-3/9.png","post":"clsa2mbrd0003kkg28lonf95e","slug":"9.png","modified":1,"renderable":1},{"_id":"source/_posts/post-4/1.png","post":"clsa2mbri0008kkg23pys42q0","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/post-6/1.png","post":"clsa2mbrk000bkkg2dx5ccyb9","slug":"1.png","modified":1,"renderable":1}],"PostCategory":[],"PostTag":[{"post_id":"clsa2mbrc0002kkg2cp6h6tnq","tag_id":"clsa2mbre0004kkg2axz6apvr","_id":"clsa2mbrg0006kkg29sabg3d8"},{"post_id":"clsa2mbrd0003kkg28lonf95e","tag_id":"clsa2mbrg0005kkg2gdc42h8k","_id":"clsa2mbrg0007kkg25c8nehbw"},{"post_id":"clsa2mbri0008kkg23pys42q0","tag_id":"clsa2mbrj000akkg2fr4if1ml","_id":"clsa2mbrl000dkkg2dqf5an96"},{"post_id":"clsa2mbri0009kkg2h6z230wh","tag_id":"clsa2mbrk000ckkg24qr98hpb","_id":"clsa2mbrl000fkkg2geeq13m2"},{"post_id":"clsa2mbrk000bkkg2dx5ccyb9","tag_id":"clsa2mbrl000ekkg21xgi3cuq","_id":"clsa2mbrl000gkkg2cm6a03k1"}],"Tag":[{"name":"建站","_id":"clsa2mbre0004kkg2axz6apvr"},{"name":"C/C++环境","_id":"clsa2mbrg0005kkg2gdc42h8k"},{"name":"数据存储png","_id":"clsa2mbrj000akkg2fr4if1ml"},{"name":"学习","_id":"clsa2mbrk000ckkg24qr98hpb"},{"name":"环境搭建","_id":"clsa2mbrl000ekkg21xgi3cuq"}]}}